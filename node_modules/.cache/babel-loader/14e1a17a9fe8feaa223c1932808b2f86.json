{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet, Platform, InteractionManager } from 'react-native';\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Color from 'color';\nimport StackGestureRefContext from '../../utils/GestureHandlerRefContext';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nconst GESTURE_VELOCITY_IMPACT = 0.3;\nconst TRUE = 1;\nconst FALSE = 0;\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\n\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nconst useNativeDriver = Platform.OS !== 'web';\nexport default class Card extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"isClosing\", new Animated.Value(FALSE));\n\n    _defineProperty(this, \"inverted\", new Animated.Value(getInvertedMultiplier(this.props.gestureDirection)));\n\n    _defineProperty(this, \"layout\", {\n      width: new Animated.Value(this.props.layout.width),\n      height: new Animated.Value(this.props.layout.height)\n    });\n\n    _defineProperty(this, \"isSwiping\", new Animated.Value(FALSE));\n\n    _defineProperty(this, \"interactionHandle\", void 0);\n\n    _defineProperty(this, \"pendingGestureCallback\", void 0);\n\n    _defineProperty(this, \"animate\", ({\n      closing,\n      velocity\n    }) => {\n      const {\n        gesture,\n        transitionSpec,\n        onOpen,\n        onClose,\n        onTransitionStart\n      } = this.props;\n      const toValue = this.getAnimateToValue(_objectSpread({}, this.props, {\n        closing\n      }));\n      const spec = closing ? transitionSpec.close : transitionSpec.open;\n      const animation = spec.animation === 'spring' ? Animated.spring : Animated.timing;\n      this.setPointerEventsEnabled(!closing);\n      this.handleStartInteraction();\n      clearTimeout(this.pendingGestureCallback);\n      onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n        closing\n      });\n      animation(gesture, _objectSpread({}, spec.config, {\n        velocity,\n        toValue,\n        useNativeDriver,\n        isInteraction: false\n      })).start(({\n        finished\n      }) => {\n        this.handleEndInteraction();\n        clearTimeout(this.pendingGestureCallback);\n\n        if (finished) {\n          if (closing) {\n            onClose();\n          } else {\n            onOpen();\n          }\n        }\n      });\n    });\n\n    _defineProperty(this, \"getAnimateToValue\", ({\n      closing,\n      layout,\n      gestureDirection\n    }) => {\n      if (!closing) {\n        return 0;\n      }\n\n      return getDistanceForDirection(layout, gestureDirection);\n    });\n\n    _defineProperty(this, \"setPointerEventsEnabled\", enabled => {\n      var _this$contentRef$curr;\n\n      const pointerEvents = enabled ? 'box-none' : 'none';\n      (_this$contentRef$curr = this.contentRef.current) === null || _this$contentRef$curr === void 0 ? void 0 : _this$contentRef$curr.setNativeProps({\n        pointerEvents\n      });\n    });\n\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(this, \"handleGestureStateChange\", ({\n      nativeEvent\n    }) => {\n      const {\n        layout,\n        onClose,\n        onGestureBegin,\n        onGestureCanceled,\n        onGestureEnd,\n        gestureDirection,\n        gestureVelocityImpact\n      } = this.props;\n\n      switch (nativeEvent.state) {\n        case GestureState.BEGAN:\n          this.isSwiping.setValue(TRUE);\n          this.handleStartInteraction();\n          onGestureBegin === null || onGestureBegin === void 0 ? void 0 : onGestureBegin();\n          break;\n\n        case GestureState.CANCELLED:\n          this.isSwiping.setValue(FALSE);\n          this.handleEndInteraction();\n          onGestureCanceled === null || onGestureCanceled === void 0 ? void 0 : onGestureCanceled();\n          break;\n\n        case GestureState.END:\n          {\n            this.isSwiping.setValue(FALSE);\n            let distance;\n            let translation;\n            let velocity;\n\n            if (gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted') {\n              distance = layout.height;\n              translation = nativeEvent.translationY;\n              velocity = nativeEvent.velocityY;\n            } else {\n              distance = layout.width;\n              translation = nativeEvent.translationX;\n              velocity = nativeEvent.velocityX;\n            }\n\n            const gestureDirectionFactor = gestureDirection === 'horizontal' || gestureDirection === 'vertical' ? 1 : -1;\n            const closing = gestureDirectionFactor * (translation + velocity * gestureVelocityImpact) > distance / 2 ? velocity !== 0 || translation !== 0 : false;\n            this.animate({\n              closing,\n              velocity\n            });\n\n            if (closing) {\n              // We call onClose with a delay to make sure that the animation has already started\n              // This will make sure that the state update caused by this doesn't affect start of animation\n              this.pendingGestureCallback = setTimeout(onClose, 32);\n            }\n\n            onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd();\n            break;\n          }\n      }\n    });\n\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => styleInterpolator({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n\n    _defineProperty(this, \"getCardAnimationContext\", memoize((index, current, next, layout, insetTop, insetRight, insetBottom, insetLeft) => ({\n      index,\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft\n      }\n    })));\n\n    _defineProperty(this, \"gestureRef\", React.createRef());\n\n    _defineProperty(this, \"contentRef\", React.createRef());\n  }\n\n  componentDidMount() {\n    this.animate({\n      closing: this.props.closing\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      layout,\n      gestureDirection,\n      closing\n    } = this.props;\n    const {\n      width,\n      height\n    } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({\n        closing\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  gestureActivationCriteria() {\n    const {\n      layout,\n      gestureDirection,\n      gestureResponseDistance\n    } = this.props;\n    const distance = gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.vertical) !== undefined ? gestureResponseDistance.vertical : GESTURE_RESPONSE_DISTANCE_VERTICAL : (gestureResponseDistance === null || gestureResponseDistance === void 0 ? void 0 : gestureResponseDistance.horizontal) !== undefined ? gestureResponseDistance.horizontal : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: {\n          bottom: -layout.height + distance\n        }\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: {\n          top: -layout.height + distance\n        }\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: {\n            right: hitSlop\n          }\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: {\n            left: hitSlop\n          }\n        };\n      }\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle\n    } = _this$props,\n          rest = _objectWithoutProperties(_this$props, [\"styleInterpolator\", \"index\", \"current\", \"gesture\", \"next\", \"layout\", \"insets\", \"overlay\", \"overlayEnabled\", \"shadowEnabled\", \"gestureEnabled\", \"gestureDirection\", \"children\", \"containerStyle\", \"contentStyle\"]);\n\n    const interpolatedStyle = this.getInterpolatedStyle(styleInterpolator, index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const animationContext = this.getCardAnimationContext(index, current, next, layout, insets.top, insets.right, insets.bottom, insets.left);\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle\n    } = interpolatedStyle;\n    const handleGestureEvent = gestureEnabled ? Animated.event([{\n      nativeEvent: gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? {\n        translationY: gesture\n      } : {\n        translationX: gesture\n      }\n    }], {\n      useNativeDriver\n    }) : undefined;\n    const {\n      backgroundColor\n    } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor ? Color(backgroundColor).alpha() === 0 : false;\n    return React.createElement(CardAnimationContext.Provider, {\n      value: animationContext\n    }, React.createElement(View, _extends({\n      pointerEvents: \"box-none\"\n    }, rest), overlayEnabled ? React.createElement(View, {\n      style: StyleSheet.absoluteFill\n    }, overlay({\n      style: overlayStyle\n    })) : null, React.createElement(Animated.View, {\n      style: [styles.container, containerStyle, customContainerStyle],\n      pointerEvents: \"box-none\"\n    }, React.createElement(PanGestureHandler, _extends({\n      ref: this.gestureRef,\n      enabled: layout.width !== 0 && gestureEnabled,\n      onGestureEvent: handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange\n    }, this.gestureActivationCriteria()), React.createElement(Animated.View, {\n      style: [styles.container, cardStyle]\n    }, shadowEnabled && shadowStyle && !isTransparent ? React.createElement(Animated.View, {\n      style: [styles.shadow, gestureDirection === 'horizontal' ? [styles.shadowHorizontal, styles.shadowLeft] : gestureDirection === 'horizontal-inverted' ? [styles.shadowHorizontal, styles.shadowRight] : gestureDirection === 'vertical' ? [styles.shadowVertical, styles.shadowTop] : [styles.shadowVertical, styles.shadowBottom], shadowStyle],\n      pointerEvents: \"none\"\n    }) : null, React.createElement(View, {\n      ref: this.contentRef,\n      style: [styles.content, contentStyle]\n    }, React.createElement(StackGestureRefContext.Provider, {\n      value: this.gestureRef\n    }, children)))))));\n  }\n\n}\n\n_defineProperty(Card, \"defaultProps\", {\n  overlayEnabled: Platform.OS !== 'ios',\n  shadowEnabled: true,\n  gestureEnabled: true,\n  gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n  overlay: ({\n    style\n  }) => style ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.overlay, style]\n  }) : null\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000'\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: {\n      width: -1,\n      height: 1\n    }\n  },\n  shadowLeft: {\n    left: 0\n  },\n  shadowRight: {\n    right: 0\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: {\n      width: 1,\n      height: -1\n    }\n  },\n  shadowTop: {\n    top: 0\n  },\n  shadowBottom: {\n    bottom: 0\n  }\n});","map":{"version":3,"sources":["Card.tsx"],"names":["State","GESTURE_VELOCITY_IMPACT","TRUE","FALSE","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","useNativeDriver","Platform","Card","React","overlayEnabled","shadowEnabled","gestureEnabled","gestureVelocityImpact","overlay","style","styles","componentDidMount","closing","componentDidUpdate","height","width","prevProps","gestureDirection","getInvertedMultiplier","componentWillUnmount","Animated","velocity","onTransitionStart","toValue","spec","transitionSpec","animation","clearTimeout","isInteraction","finished","onClose","onOpen","getDistanceForDirection","enabled","pointerEvents","InteractionManager","nativeEvent","GestureState","onGestureBegin","onGestureCanceled","distance","layout","translation","gestureDirectionFactor","setTimeout","onGestureEnd","memoize","styleInterpolator","current","progress","next","swiping","inverted","layouts","screen","insets","top","right","bottom","left","insetLeft","gestureActivationCriteria","gestureResponseDistance","maxDeltaX","minOffsetY","hitSlop","invertedMultiplier","minOffsetX","maxDeltaY","render","containerStyle","contentStyle","rest","interpolatedStyle","animationContext","shadowStyle","handleGestureEvent","translationY","gesture","translationX","backgroundColor","StyleSheet","isTransparent","Color","absoluteFill","overlayStyle","handleGestureStateChange","gestureRef","container","flex","content","overflow","shadow","position","shadowRadius","shadowColor","shadowOpacity","shadowHorizontal","shadowOffset","shadowLeft","shadowRight","shadowVertical","shadowTop","shadowBottom"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  StyleSheet,\n  ViewProps,\n  StyleProp,\n  ViewStyle,\n  Platform,\n  InteractionManager,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport { EdgeInsets } from 'react-native-safe-area-context';\nimport Color from 'color';\nimport StackGestureRefContext from '../../utils/GestureHandlerRefContext';\nimport CardAnimationContext from '../../utils/CardAnimationContext';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport getInvertedMultiplier from '../../utils/getInvertedMultiplier';\nimport memoize from '../../utils/memoize';\nimport {\n  TransitionSpec,\n  StackCardStyleInterpolator,\n  GestureDirection,\n  Layout,\n} from '../../types';\n\ntype Props = ViewProps & {\n  index: number;\n  closing: boolean;\n  next?: Animated.AnimatedInterpolation;\n  current: Animated.AnimatedInterpolation;\n  gesture: Animated.Value;\n  layout: Layout;\n  insets: EdgeInsets;\n  gestureDirection: GestureDirection;\n  onOpen: () => void;\n  onClose: () => void;\n  onTransitionStart?: (props: { closing: boolean }) => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  children: React.ReactNode;\n  overlay: (props: { style: StyleProp<ViewStyle> }) => React.ReactNode;\n  overlayEnabled: boolean;\n  shadowEnabled: boolean;\n  gestureEnabled: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact: number;\n  transitionSpec: {\n    open: TransitionSpec;\n    close: TransitionSpec;\n  };\n  styleInterpolator: StackCardStyleInterpolator;\n  containerStyle?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n};\n\nconst GESTURE_VELOCITY_IMPACT = 0.3;\n\nconst TRUE = 1;\nconst FALSE = 0;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class Card extends React.Component<Props> {\n  static defaultProps = {\n    overlayEnabled: Platform.OS !== 'ios',\n    shadowEnabled: true,\n    gestureEnabled: true,\n    gestureVelocityImpact: GESTURE_VELOCITY_IMPACT,\n    overlay: ({ style }: { style: StyleProp<ViewStyle> }) =>\n      style ? (\n        <Animated.View pointerEvents=\"none\" style={[styles.overlay, style]} />\n      ) : null,\n  };\n\n  componentDidMount() {\n    this.animate({ closing: this.props.closing });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { layout, gestureDirection, closing } = this.props;\n    const { width, height } = layout;\n\n    if (width !== prevProps.layout.width) {\n      this.layout.width.setValue(width);\n    }\n\n    if (height !== prevProps.layout.height) {\n      this.layout.height.setValue(height);\n    }\n\n    if (gestureDirection !== prevProps.gestureDirection) {\n      this.inverted.setValue(getInvertedMultiplier(gestureDirection));\n    }\n\n    if (\n      this.getAnimateToValue(this.props) !== this.getAnimateToValue(prevProps)\n    ) {\n      // We need to trigger the animation when route was closed\n      // Thr route might have been closed by a `POP` action or by a gesture\n      // When route was closed due to a gesture, the animation would've happened already\n      // It's still important to trigger the animation so that `onClose` is called\n      // If `onClose` is not called, cleanup step won't be performed for gestures\n      this.animate({ closing });\n    }\n  }\n\n  componentWillUnmount() {\n    this.handleEndInteraction();\n  }\n\n  private isClosing = new Animated.Value(FALSE);\n\n  private inverted = new Animated.Value(\n    getInvertedMultiplier(this.props.gestureDirection)\n  );\n\n  private layout = {\n    width: new Animated.Value(this.props.layout.width),\n    height: new Animated.Value(this.props.layout.height),\n  };\n\n  private isSwiping = new Animated.Value(FALSE);\n\n  private interactionHandle: number | undefined;\n\n  private pendingGestureCallback: number | undefined;\n\n  private animate = ({\n    closing,\n    velocity,\n  }: {\n    closing: boolean;\n    velocity?: number;\n  }) => {\n    const {\n      gesture,\n      transitionSpec,\n      onOpen,\n      onClose,\n      onTransitionStart,\n    } = this.props;\n\n    const toValue = this.getAnimateToValue({\n      ...this.props,\n      closing,\n    });\n\n    const spec = closing ? transitionSpec.close : transitionSpec.open;\n\n    const animation =\n      spec.animation === 'spring' ? Animated.spring : Animated.timing;\n\n    this.setPointerEventsEnabled(!closing);\n    this.handleStartInteraction();\n\n    clearTimeout(this.pendingGestureCallback);\n\n    onTransitionStart?.({ closing });\n    animation(gesture, {\n      ...spec.config,\n      velocity,\n      toValue,\n      useNativeDriver,\n      isInteraction: false,\n    }).start(({ finished }) => {\n      this.handleEndInteraction();\n\n      clearTimeout(this.pendingGestureCallback);\n\n      if (finished) {\n        if (closing) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      }\n    });\n  };\n\n  private getAnimateToValue = ({\n    closing,\n    layout,\n    gestureDirection,\n  }: {\n    closing?: boolean;\n    layout: Layout;\n    gestureDirection: GestureDirection;\n  }) => {\n    if (!closing) {\n      return 0;\n    }\n\n    return getDistanceForDirection(layout, gestureDirection);\n  };\n\n  private setPointerEventsEnabled = (enabled: boolean) => {\n    const pointerEvents = enabled ? 'box-none' : 'none';\n\n    this.contentRef.current?.setNativeProps({ pointerEvents });\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    const {\n      layout,\n      onClose,\n      onGestureBegin,\n      onGestureCanceled,\n      onGestureEnd,\n      gestureDirection,\n      gestureVelocityImpact,\n    } = this.props;\n\n    switch (nativeEvent.state) {\n      case GestureState.BEGAN:\n        this.isSwiping.setValue(TRUE);\n        this.handleStartInteraction();\n        onGestureBegin?.();\n        break;\n      case GestureState.CANCELLED:\n        this.isSwiping.setValue(FALSE);\n        this.handleEndInteraction();\n        onGestureCanceled?.();\n        break;\n      case GestureState.END: {\n        this.isSwiping.setValue(FALSE);\n\n        let distance;\n        let translation;\n        let velocity;\n\n        if (\n          gestureDirection === 'vertical' ||\n          gestureDirection === 'vertical-inverted'\n        ) {\n          distance = layout.height;\n          translation = nativeEvent.translationY;\n          velocity = nativeEvent.velocityY;\n        } else {\n          distance = layout.width;\n          translation = nativeEvent.translationX;\n          velocity = nativeEvent.velocityX;\n        }\n\n        const gestureDirectionFactor =\n          gestureDirection === 'horizontal' || gestureDirection === 'vertical'\n            ? 1\n            : -1;\n\n        const closing =\n          gestureDirectionFactor *\n            (translation + velocity * gestureVelocityImpact) >\n          distance / 2\n            ? velocity !== 0 || translation !== 0\n            : false;\n\n        this.animate({ closing, velocity });\n\n        if (closing) {\n          // We call onClose with a delay to make sure that the animation has already started\n          // This will make sure that the state update caused by this doesn't affect start of animation\n          this.pendingGestureCallback = (setTimeout(\n            onClose,\n            32\n          ) as any) as number;\n        }\n\n        onGestureEnd?.();\n        break;\n      }\n    }\n  };\n\n  // Memoize this to avoid extra work on re-render\n  private getInterpolatedStyle = memoize(\n    (\n      styleInterpolator: StackCardStyleInterpolator,\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) =>\n      styleInterpolator({\n        index,\n        current: { progress: current },\n        next: next && { progress: next },\n        closing: this.isClosing,\n        swiping: this.isSwiping,\n        inverted: this.inverted,\n        layouts: {\n          screen: layout,\n        },\n        insets: {\n          top: insetTop,\n          right: insetRight,\n          bottom: insetBottom,\n          left: insetLeft,\n        },\n      })\n  );\n\n  // Keep track of the animation context when deps changes.\n  private getCardAnimationContext = memoize(\n    (\n      index: number,\n      current: Animated.AnimatedInterpolation,\n      next: Animated.AnimatedInterpolation | undefined,\n      layout: Layout,\n      insetTop: number,\n      insetRight: number,\n      insetBottom: number,\n      insetLeft: number\n    ) => ({\n      index,\n      current: { progress: current },\n      next: next && { progress: next },\n      closing: this.isClosing,\n      swiping: this.isSwiping,\n      inverted: this.inverted,\n      layouts: {\n        screen: layout,\n      },\n      insets: {\n        top: insetTop,\n        right: insetRight,\n        bottom: insetBottom,\n        left: insetLeft,\n      },\n    })\n  );\n\n  private gestureActivationCriteria() {\n    const { layout, gestureDirection, gestureResponseDistance } = this.props;\n\n    const distance =\n      gestureDirection === 'vertical' ||\n      gestureDirection === 'vertical-inverted'\n        ? gestureResponseDistance?.vertical !== undefined\n          ? gestureResponseDistance.vertical\n          : GESTURE_RESPONSE_DISTANCE_VERTICAL\n        : gestureResponseDistance?.horizontal !== undefined\n        ? gestureResponseDistance.horizontal\n        : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n    if (gestureDirection === 'vertical') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: 5,\n        hitSlop: { bottom: -layout.height + distance },\n      };\n    } else if (gestureDirection === 'vertical-inverted') {\n      return {\n        maxDeltaX: 15,\n        minOffsetY: -5,\n        hitSlop: { top: -layout.height + distance },\n      };\n    } else {\n      const hitSlop = -layout.width + distance;\n      const invertedMultiplier = getInvertedMultiplier(gestureDirection);\n\n      if (invertedMultiplier === 1) {\n        return {\n          minOffsetX: 5,\n          maxDeltaY: 20,\n          hitSlop: { right: hitSlop },\n        };\n      } else {\n        return {\n          minOffsetX: -5,\n          maxDeltaY: 20,\n          hitSlop: { left: hitSlop },\n        };\n      }\n    }\n  }\n\n  private gestureRef = React.createRef<PanGestureHandler>();\n\n  private contentRef = React.createRef<View>();\n\n  render() {\n    const {\n      styleInterpolator,\n      index,\n      current,\n      gesture,\n      next,\n      layout,\n      insets,\n      overlay,\n      overlayEnabled,\n      shadowEnabled,\n      gestureEnabled,\n      gestureDirection,\n      children,\n      containerStyle: customContainerStyle,\n      contentStyle,\n      ...rest\n    } = this.props;\n\n    const interpolatedStyle = this.getInterpolatedStyle(\n      styleInterpolator,\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const animationContext = this.getCardAnimationContext(\n      index,\n      current,\n      next,\n      layout,\n      insets.top,\n      insets.right,\n      insets.bottom,\n      insets.left\n    );\n\n    const {\n      containerStyle,\n      cardStyle,\n      overlayStyle,\n      shadowStyle,\n    } = interpolatedStyle;\n\n    const handleGestureEvent = gestureEnabled\n      ? Animated.event(\n          [\n            {\n              nativeEvent:\n                gestureDirection === 'vertical' ||\n                gestureDirection === 'vertical-inverted'\n                  ? { translationY: gesture }\n                  : { translationX: gesture },\n            },\n          ],\n          { useNativeDriver }\n        )\n      : undefined;\n\n    const { backgroundColor } = StyleSheet.flatten(contentStyle || {});\n    const isTransparent = backgroundColor\n      ? Color(backgroundColor).alpha() === 0\n      : false;\n\n    return (\n      <CardAnimationContext.Provider value={animationContext}>\n        <View pointerEvents=\"box-none\" {...rest}>\n          {overlayEnabled ? (\n            <View style={StyleSheet.absoluteFill}>\n              {overlay({ style: overlayStyle })}\n            </View>\n          ) : null}\n          <Animated.View\n            style={[styles.container, containerStyle, customContainerStyle]}\n            pointerEvents=\"box-none\"\n          >\n            <PanGestureHandler\n              ref={this.gestureRef}\n              enabled={layout.width !== 0 && gestureEnabled}\n              onGestureEvent={handleGestureEvent}\n              onHandlerStateChange={this.handleGestureStateChange}\n              {...this.gestureActivationCriteria()}\n            >\n              <Animated.View style={[styles.container, cardStyle]}>\n                {shadowEnabled && shadowStyle && !isTransparent ? (\n                  <Animated.View\n                    style={[\n                      styles.shadow,\n                      gestureDirection === 'horizontal'\n                        ? [styles.shadowHorizontal, styles.shadowLeft]\n                        : gestureDirection === 'horizontal-inverted'\n                        ? [styles.shadowHorizontal, styles.shadowRight]\n                        : gestureDirection === 'vertical'\n                        ? [styles.shadowVertical, styles.shadowTop]\n                        : [styles.shadowVertical, styles.shadowBottom],\n                      shadowStyle,\n                    ]}\n                    pointerEvents=\"none\"\n                  />\n                ) : null}\n                <View\n                  ref={this.contentRef}\n                  style={[styles.content, contentStyle]}\n                >\n                  <StackGestureRefContext.Provider value={this.gestureRef}>\n                    {children}\n                  </StackGestureRefContext.Provider>\n                </View>\n              </Animated.View>\n            </PanGestureHandler>\n          </Animated.View>\n        </View>\n      </CardAnimationContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: '#000',\n  },\n  shadow: {\n    position: 'absolute',\n    backgroundColor: '#fff',\n    shadowRadius: 5,\n    shadowColor: '#000',\n    shadowOpacity: 0.3,\n  },\n  shadowHorizontal: {\n    top: 0,\n    bottom: 0,\n    width: 3,\n    shadowOffset: { width: -1, height: 1 },\n  },\n  shadowLeft: {\n    left: 0,\n  },\n  shadowRight: {\n    right: 0,\n  },\n  shadowVertical: {\n    left: 0,\n    right: 0,\n    height: 3,\n    shadowOffset: { width: 1, height: -1 },\n  },\n  shadowTop: {\n    top: 0,\n  },\n  shadowBottom: {\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}