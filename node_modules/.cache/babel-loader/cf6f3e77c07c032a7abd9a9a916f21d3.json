{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { BaseButton } from 'react-native-gesture-handler';\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\nconst useNativeDriver = Platform.OS !== 'web';\nexport default class BorderlessButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"opacity\", new Animated.Value(1));\n\n    _defineProperty(this, \"handleActiveStateChange\", active => {\n      var _this$props$onActiveS, _this$props;\n\n      if (Platform.OS !== 'android') {\n        Animated.spring(this.opacity, {\n          stiffness: 1000,\n          damping: 500,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          toValue: active ? this.props.activeOpacity : 1,\n          useNativeDriver\n        }).start();\n      }\n\n      (_this$props$onActiveS = (_this$props = this.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props, active);\n    });\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          {\n      children,\n      style,\n      enabled\n    } = _this$props2,\n          rest = _objectWithoutProperties(_this$props2, [\"children\", \"style\", \"enabled\"]);\n\n    return (// @ts-ignore\n      React.createElement(AnimatedBaseButton, _extends({}, rest, {\n        onActiveStateChange: this.handleActiveStateChange,\n        style: [style, Platform.OS === 'ios' && enabled && {\n          opacity: this.opacity\n        }]\n      }), children)\n    );\n  }\n\n}\n\n_defineProperty(BorderlessButton, \"defaultProps\", {\n  activeOpacity: 0.3,\n  borderless: true\n});","map":{"version":3,"sources":["BorderlessButton.tsx"],"names":["AnimatedBaseButton","Animated","useNativeDriver","Platform","BorderlessButton","React","activeOpacity","borderless","active","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","toValue","render","enabled","rest","opacity"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,QAAA,QAAA,cAAA;AACA,SAAA,UAAA,QAAA,8BAAA;AAEA,MAAMA,kBAAkB,GAAGC,QAAQ,CAARA,uBAAAA,CAA3B,UAA2BA,CAA3B;AAMA,MAAMC,eAAe,GAAGC,QAAQ,CAARA,EAAAA,KAAxB,KAAA;AAEA,eAAe,MAAA,gBAAA,SAA+BE,KAAK,CAApC,SAAA,CAAsD;AAAA,EAAA,WAAA,CAAA,GAAA,IAAA,EAAA;AAAA,UAAA,GAAA,IAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAMjD,IAAIJ,QAAQ,CAAZ,KAAA,CANiD,CAMjD,CANiD,CAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,yBAAA,EAQhCO,MAAD,IAAqB;AAAA,UAAA,qBAAA,EAAA,WAAA;;AACrD,UAAIL,QAAQ,CAARA,EAAAA,KAAJ,SAAA,EAA+B;AAC7BF,QAAAA,QAAQ,CAARA,MAAAA,CAAgB,KAAhBA,OAAAA,EAA8B;AAC5BQ,UAAAA,SAAS,EADmB,IAAA;AAE5BC,UAAAA,OAAO,EAFqB,GAAA;AAG5BC,UAAAA,IAAI,EAHwB,CAAA;AAI5BC,UAAAA,iBAAiB,EAJW,IAAA;AAK5BC,UAAAA,yBAAyB,EALG,IAAA;AAM5BC,UAAAA,kBAAkB,EANU,IAAA;AAO5BC,UAAAA,OAAO,EAAEP,MAAM,GAAG,KAAA,KAAA,CAAH,aAAA,GAPa,CAAA;AAQ5BN,UAAAA;AAR4B,SAA9BD,EAAAA,KAAAA;AAUD;;AAED,OAAA,qBAAA,GAAA,CAAA,WAAA,GAAA,KAAA,KAAA,EAAA,mBAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,MAAA,CAAA;AAtBiE,KAAA,CAAA;AAAA;;AAyBnEe,EAAAA,MAAM,GAAG;AACP,UAAA,YAAA,GAA8C,KAA9C,KAAA;AAAA,UAAM;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAAmBC,MAAAA;AAAnB,QAAN,YAAA;AAAA,UAAqCC,IAArC,GAAA,wBAAA,CAAA,YAAA,EAAA,CAAA,UAAA,EAAA,OAAA,EAAA,SAAA,CAAA,CAAA;;AAEA,WACE;AACA,MAAA,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,QAAA,mBAAmB,EAAE,KAFvB,uBAAA;AAGE,QAAA,KAAK,EAAE,CAAA,KAAA,EAELf,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAAA,OAAAA,IAAoC;AAAEgB,UAAAA,OAAO,EAAE,KAAKA;AAAhB,SAF/B;AAHT,OAAA,CAAA,EAAA,QAAA;AAFF;AAaD;;AAzCkE;;gBAAhDf,gB,kBACG;AACpBE,EAAAA,aAAa,EADO,GAAA;AAEpBC,EAAAA,UAAU,EAAE;AAFQ,C","sourcesContent":["import * as React from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { BaseButton } from 'react-native-gesture-handler';\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\ntype Props = React.ComponentProps<typeof BaseButton> & {\n  activeOpacity: number;\n};\n\nconst useNativeDriver = Platform.OS !== 'web';\n\nexport default class BorderlessButton extends React.Component<Props> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity = new Animated.Value(1);\n\n  private handleActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      Animated.spring(this.opacity, {\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        toValue: active ? this.props.activeOpacity : 1,\n        useNativeDriver,\n      }).start();\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, enabled, ...rest } = this.props;\n\n    return (\n      // @ts-ignore\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.handleActiveStateChange}\n        style={[\n          style,\n          Platform.OS === 'ios' && enabled && { opacity: this.opacity },\n        ]}\n      >\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}