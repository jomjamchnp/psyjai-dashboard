{"ast":null,"code":"var _UIManager$getViewMan, _UIManager$getViewMan2, _UIManager$getConstan;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { findNodeHandle as findNodeHandleRN, NativeModules, Platform, Touchable } from 'react-native'; // @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\n\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst {\n  UIManager = {}\n} = NativeModules;\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}; // Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\n\nUIManager.genericDirectEventTypes = { ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig\n}; // In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\n\nconst UIManagerConstants = (_UIManager$getViewMan = (_UIManager$getViewMan2 = UIManager.getViewManagerConfig) === null || _UIManager$getViewMan2 === void 0 ? void 0 : _UIManager$getViewMan2.call(UIManager, 'getConstants')) !== null && _UIManager$getViewMan !== void 0 ? _UIManager$getViewMan : (_UIManager$getConstan = UIManager.getConstants) === null || _UIManager$getConstan === void 0 ? void 0 : _UIManager$getConstan.call(UIManager);\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = { ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig\n  };\n} // Wrap JS responder calls and notify gesture handler manager\n\n\nconst {\n  setJSResponder: oldSetJSResponder = () => {//no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {//no operation\n  }\n} = UIManager;\n\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\n\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\n\nfunction filterConfig(props, validProps, defaults = {}) {\n  const res = { ...defaults\n  };\n  validProps.forEach(key => {\n    const value = props[key];\n\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = {\n            top: value,\n            left: value,\n            bottom: value,\n            right: value\n          };\n        }\n      }\n\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(({\n      current\n    }) => current).filter(handle => handle);\n  } // converts handler string IDs into their numeric tags\n\n\n  return handlerIDs.map(handlerID => {\n    var _handlerID$current;\n\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(handlerTag => handlerTag > 0);\n}\n\nfunction hasUnresolvedRefs(props) {\n  // TODO(TS) - add type for extract arg\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n\n    return refs.some(r => r && r.current === null);\n  };\n\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded'\n}; // TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\n\nexport default function createHandler({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = []\n}) {\n  class Handler extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"handlerTag\", void 0);\n\n      _defineProperty(this, \"config\", void 0);\n\n      _defineProperty(this, \"propsRef\", void 0);\n\n      _defineProperty(this, \"viewNode\", void 0);\n\n      _defineProperty(this, \"viewTag\", void 0);\n\n      _defineProperty(this, \"updateEnqueued\", null);\n\n      _defineProperty(this, \"onGestureHandlerEvent\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n\n          (_this$props$onGesture = (_this$props = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n\n          (_this$props$onGesture2 = (_this$props2 = this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n\n      _defineProperty(this, \"onGestureHandlerStateChange\", event => {\n        if (event.nativeEvent.handlerTag === this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n\n          (_this$props$onHandler = (_this$props3 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          const state = event.nativeEvent.state;\n          const stateEventName = stateToPropMappings[state];\n          const eventHandler = stateEventName && this.props[stateEventName];\n\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n\n          (_this$props$onGesture3 = (_this$props4 = this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n\n      _defineProperty(this, \"refHandler\", node => {\n        this.viewNode = node;\n        const child = React.Children.only(this.props.children); // TODO(TS) fix ref type\n\n        const {\n          ref\n        } = child;\n\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n\n      _defineProperty(this, \"createGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, this.handlerTag, newConfig);\n      });\n\n      _defineProperty(this, \"attachGestureHandler\", newViewTag => {\n        this.viewTag = newViewTag;\n\n        if (Platform.OS === 'web') {\n          // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag);\n        }\n      });\n\n      _defineProperty(this, \"updateGestureHandler\", newConfig => {\n        this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      });\n\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = /*#__PURE__*/React.createRef();\n\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\".concat(props.id, \"\\\" already registered\"));\n        }\n\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props = this.props;\n\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config));\n      this.attachGestureHandler(findNodeHandle(this.viewNode)); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      } // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n\n\n      const handlerID = this.props.id;\n\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    update() {\n      const newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config);\n\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates) {\n      const mergedProps = { ...this.props,\n        ...updates\n      };\n      const newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [...allowedProps, ...customNativeProps], config);\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent\n      } = this.props;\n\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange\n      } = this.props;\n\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler\n      };\n      this.propsRef.current = events;\n      const child = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n\n      if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(Touchable.renderDebugView({\n          color: 'mediumspringgreen',\n          hitSlop: child.props.hitSlop\n        }));\n      }\n\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: this.refHandler,\n        collapsable: false,\n        ...events\n      }, grandChildren);\n    }\n\n  }\n\n  _defineProperty(Handler, \"displayName\", name);\n\n  return Handler;\n}","map":{"version":3,"sources":["createHandler.ts"],"names":["findNodeHandle","Platform","findNodeHandleRN","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","UIManagerConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","RNGestureHandlerModule","handlerTag","handlerIDToTag","param","Object","name","defaults","res","validProps","key","value","props","isConfigParam","transformIntoHandlerTags","top","left","bottom","right","Array","handlerIDs","current","handle","handlerID","extract","refs","r","stateToPropMappings","State","allowedProps","config","customNativeProps","React","constructor","componentDidMount","hasUnresolvedRefs","setImmediate","filterConfig","transformProps","componentDidUpdate","viewTag","componentWillUnmount","clearImmediate","event","state","stateEventName","eventHandler","node","child","ref","newConfig","newViewTag","update","deepEqual","setNativeProps","mergedProps","updates","render","gestureEventHandler","onGestureEvent","gestureStateEventHandler","onHandlerStateChange","events","grandChildren","Touchable","color","hitSlop","collapsable"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"module"}