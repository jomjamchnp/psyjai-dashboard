{"ast":null,"code":"import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: ev.deltaX,\n        y: ev.deltaY\n      }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const {\n              handlerTag,\n              view,\n              isGestureRunning\n            } = gesture;\n            return (// Check if this gesture isn't self\n              handlerTag !== this.handlerTag && // Ensure the gesture needs to be cancelled\n              isGestureRunning && // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler && // Ensure a view exists and is a child of the current view\n              view && // @ts-ignore FIXME(TS) view type\n              this.view.contains(view)\n            );\n          }); // Cancel all of the gestures that passed the filter\n\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["onRawEvent","ev","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","deltaY","gestures","NodeManager","gesture","isGestureRunning","handlerTag"],"mappings":"AAAA,OAAA,sBAAA,MAAA,0BAAA;AAEA,OAAO,KAAP,WAAA,MAAA,eAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,SAAA,mBAAA,EAAA,UAAA,QAAA,SAAA;;AAEA,MAAA,wBAAA,SAAA,mBAAA,CAA2D;AACzDA,EAAAA,UAAU,CAAA,EAAA,EAAqB;AAC7B,UAAA,UAAA,CAAA,EAAA;;AACA,QAAI,CAACC,EAAE,CAAP,OAAA,EAAiB;AACf;AACA,UAAIC,mBAAmB,CAACC,UAAU,CAAC;AAAEC,QAAAA,CAAC,EAAEH,EAAE,CAAP,MAAA;AAAgBI,QAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,OAAD,CAAX,EAAvB,EAAuB,CAAvB,EAAyE;AACvE;AACA,YAAI,KAAA,MAAA,CAAJ,oBAAA,EAAsC;AACpC,gBAAMC,QAAQ,GAAG,MAAM,CAAN,MAAA,CAAcC,WAAW,CAAzB,QAAcA,EAAd,EAAA,MAAA,CACdC,OAAD,IAAa;AACX,kBAAM;AAAA,cAAA,UAAA;AAAA,cAAA,IAAA;AAAoBC,cAAAA;AAApB,gBAAN,OAAA;AACA,mBACE;AACAC,cAAAA,UAAU,KAAK,KAAfA,UAAAA,IACA;AADAA,cAAAA,gBAAAA,IAGA;AACAF,cAAAA,OAAO,YAJPE,sBAAAA,IAKA;AALAA,cAAAA,IAAAA,IAOA;AACA,mBAAA,IAAA,CAAA,QAAA,CAAA,IAAA;AAVF;AAJgC,WACnB,CAAjB,CADoC,CAkBpC;;AACA,eAAK,MAAL,OAAA,IAAA,QAAA,EAAgC;AAC9B;AACAF,YAAAA,OAAO,CAAPA,eAAAA,CAAAA,EAAAA;AACD;AACF;AACF;AACF;AACF;;AAjCwD;;AAoC3D,eAAA,wBAAA","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"module"}