{"ast":null,"code":"import { createAnimatedPropAdapter } from './core';\nexport const SVGAdapter = createAnimatedPropAdapter(props => {\n  'worklet';\n\n  const keys = Object.keys(props); // transform\n\n  if (keys.includes('transform')) {\n    if (Array.isArray(props.transform)) {\n      // case of array with 6 values => https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/elements/Shape.tsx#L200\n      if (props.transform.length !== 6) {\n        throw new Error(`invalid transform length of ${props.transform.length}, should be 6`);\n      }\n\n      const transform = props.transform;\n      const x = props.x ?? 0;\n      const y = props.y ?? 0;\n      props.transform = [{\n        translateX: transform[0] * x + transform[2] * y + transform[4]\n      }, {\n        translateY: transform[1] * x + transform[3] * y + transform[5]\n      }];\n    } else if (typeof props.transform === 'string') {\n      // case of string 'translate(translateX translateY)'\n      // todo: handle other cases of transform string like here https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/lib/extract/extractTransform.ts#L184\n      const arr = props.transform.replace('translate(', '').replace(')', '').split(' ');\n      props.transform = [{\n        translateX: parseFloat(arr[0])\n      }, {\n        translateY: parseFloat(arr[1])\n      }];\n    }\n  } // todo: other props\n\n});\nexport const TextInputAdapter = createAnimatedPropAdapter(props => {\n  'worklet';\n\n  const keys = Object.keys(props); // convert text to value like RN does here: https://github.com/facebook/react-native/blob/f2c6279ca497b34d5a2bfbb6f2d33dc7a7bea02a/Libraries/Components/TextInput/TextInput.js#L878\n\n  if (keys.includes('value')) {\n    props.text = props.value;\n    delete props.value;\n  }\n}, ['text']);","map":{"version":3,"sources":["D:/dash_kol/my-app/node_modules/react-native-reanimated/src/reanimated2/PropAdapters.js"],"names":["createAnimatedPropAdapter","SVGAdapter","props","keys","Object","includes","Array","isArray","transform","length","Error","x","y","translateX","translateY","arr","replace","split","parseFloat","TextInputAdapter","text","value"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,QAA1C;AAEA,OAAO,MAAMC,UAAU,GAAGD,yBAAyB,CAAEE,KAAD,IAAW;AAC7D;;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,KAAZ,CAAb,CAF6D,CAG7D;;AACA,MAAIC,IAAI,CAACE,QAAL,CAAc,WAAd,CAAJ,EAAgC;AAC9B,QAAIC,KAAK,CAACC,OAAN,CAAcL,KAAK,CAACM,SAApB,CAAJ,EAAoC;AAClC;AACA,UAAIN,KAAK,CAACM,SAAN,CAAgBC,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,cAAM,IAAIC,KAAJ,CACH,+BAA8BR,KAAK,CAACM,SAAN,CAAgBC,MAAO,eADlD,CAAN;AAGD;;AACD,YAAMD,SAAS,GAAGN,KAAK,CAACM,SAAxB;AACA,YAAMG,CAAC,GAAGT,KAAK,CAACS,CAAN,IAAW,CAArB;AACA,YAAMC,CAAC,GAAGV,KAAK,CAACU,CAAN,IAAW,CAArB;AACAV,MAAAA,KAAK,CAACM,SAAN,GAAkB,CAChB;AAAEK,QAAAA,UAAU,EAAEL,SAAS,CAAC,CAAD,CAAT,GAAeG,CAAf,GAAmBH,SAAS,CAAC,CAAD,CAAT,GAAeI,CAAlC,GAAsCJ,SAAS,CAAC,CAAD;AAA7D,OADgB,EAEhB;AAAEM,QAAAA,UAAU,EAAEN,SAAS,CAAC,CAAD,CAAT,GAAeG,CAAf,GAAmBH,SAAS,CAAC,CAAD,CAAT,GAAeI,CAAlC,GAAsCJ,SAAS,CAAC,CAAD;AAA7D,OAFgB,CAAlB;AAID,KAdD,MAcO,IAAI,OAAON,KAAK,CAACM,SAAb,KAA2B,QAA/B,EAAyC;AAC9C;AACA;AACA,YAAMO,GAAG,GAAGb,KAAK,CAACM,SAAN,CACTQ,OADS,CACD,YADC,EACa,EADb,EAETA,OAFS,CAED,GAFC,EAEI,EAFJ,EAGTC,KAHS,CAGH,GAHG,CAAZ;AAIAf,MAAAA,KAAK,CAACM,SAAN,GAAkB,CAChB;AAAEK,QAAAA,UAAU,EAAEK,UAAU,CAACH,GAAG,CAAC,CAAD,CAAJ;AAAxB,OADgB,EAEhB;AAAED,QAAAA,UAAU,EAAEI,UAAU,CAACH,GAAG,CAAC,CAAD,CAAJ;AAAxB,OAFgB,CAAlB;AAID;AACF,GA/B4D,CAgC7D;;AACD,CAjCkD,CAA5C;AAmCP,OAAO,MAAMI,gBAAgB,GAAGnB,yBAAyB,CACtDE,KAAD,IAAW;AACT;;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,KAAZ,CAAb,CAFS,CAGT;;AACA,MAAIC,IAAI,CAACE,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1BH,IAAAA,KAAK,CAACkB,IAAN,GAAalB,KAAK,CAACmB,KAAnB;AACA,WAAOnB,KAAK,CAACmB,KAAb;AACD;AACF,CATsD,EAUvD,CAAC,MAAD,CAVuD,CAAlD","sourcesContent":["import { createAnimatedPropAdapter } from './core';\n\nexport const SVGAdapter = createAnimatedPropAdapter((props) => {\n  'worklet';\n  const keys = Object.keys(props);\n  // transform\n  if (keys.includes('transform')) {\n    if (Array.isArray(props.transform)) {\n      // case of array with 6 values => https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/elements/Shape.tsx#L200\n      if (props.transform.length !== 6) {\n        throw new Error(\n          `invalid transform length of ${props.transform.length}, should be 6`\n        );\n      }\n      const transform = props.transform;\n      const x = props.x ?? 0;\n      const y = props.y ?? 0;\n      props.transform = [\n        { translateX: transform[0] * x + transform[2] * y + transform[4] },\n        { translateY: transform[1] * x + transform[3] * y + transform[5] },\n      ];\n    } else if (typeof props.transform === 'string') {\n      // case of string 'translate(translateX translateY)'\n      // todo: handle other cases of transform string like here https://github.com/react-native-svg/react-native-svg/blob/b2e2c355204ff4b10973d3afce1495f7e4167ff7/src/lib/extract/extractTransform.ts#L184\n      const arr = props.transform\n        .replace('translate(', '')\n        .replace(')', '')\n        .split(' ');\n      props.transform = [\n        { translateX: parseFloat(arr[0]) },\n        { translateY: parseFloat(arr[1]) },\n      ];\n    }\n  }\n  // todo: other props\n});\n\nexport const TextInputAdapter = createAnimatedPropAdapter(\n  (props) => {\n    'worklet';\n    const keys = Object.keys(props);\n    // convert text to value like RN does here: https://github.com/facebook/react-native/blob/f2c6279ca497b34d5a2bfbb6f2d33dc7a7bea02a/Libraries/Components/TextInput/TextInput.js#L878\n    if (keys.includes('value')) {\n      props.text = props.value;\n      delete props.value;\n    }\n  },\n  ['text']\n);\n"]},"metadata":{},"sourceType":"module"}