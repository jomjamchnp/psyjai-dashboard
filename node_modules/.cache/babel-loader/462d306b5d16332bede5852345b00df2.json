{"ast":null,"code":"// TODO(TS) remove if not necessary after rewrite\nexport const isnan = v => Number.isNaN(v); // TODO(TS) remove if not necessary after rewrite\n\nexport const isValidNumber = v => typeof v === 'number' && !Number.isNaN(v);\nexport const TEST_MIN_IF_NOT_NAN = (value, limit) => !isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\nexport const VEC_LEN_SQ = ({\n  x = 0,\n  y = 0\n} = {}) => x * x + y * y;\nexport const TEST_MAX_IF_NOT_NAN = (value, max) => !isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\nexport function fireAfterInterval(method, interval) {\n  if (!interval) {\n    method();\n    return null;\n  }\n\n  return setTimeout(() => method(), interval);\n}","map":{"version":3,"sources":["utils.ts"],"names":["isnan","v","Number","isValidNumber","TEST_MIN_IF_NOT_NAN","limit","value","VEC_LEN_SQ","x","y","TEST_MAX_IF_NOT_NAN","max","method","setTimeout"],"mappings":"AAAA;AACA,OAAO,MAAMA,KAAK,GAAIC,CAAD,IAAgBC,MAAM,CAANA,KAAAA,CAA9B,CAA8BA,CAA9B,C,CAEP;;AACA,OAAO,MAAMC,aAAa,GAAIF,CAAD,IAC3B,OAAA,CAAA,KAAA,QAAA,IAAyB,CAACC,MAAM,CAANA,KAAAA,CADrB,CACqBA,CADrB;AAGP,OAAO,MAAME,mBAAmB,GAAG,CAAA,KAAA,EAAA,KAAA,KACjC,CAACJ,KAAK,CAAN,KAAM,CAAN,KACEK,KAAK,GAALA,CAAAA,IAAaC,KAAK,IAAnB,KAACD,IAAiCA,KAAK,IAALA,CAAAA,IAAcC,KAAK,IAFjD,KACL,CADK;AAGP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,CAAC,GAAH,CAAA;AAASC,EAAAA,CAAC,GAAG;AAAb,IAAD,EAAA,KAA2BD,CAAC,GAADA,CAAAA,GAAQC,CAAC,GAAvD,CAAA;AACP,OAAO,MAAMC,mBAAmB,GAAG,CAAA,KAAA,EAAA,GAAA,KACjC,CAACV,KAAK,CAAN,GAAM,CAAN,KAAiBW,GAAG,GAAHA,CAAAA,IAAWL,KAAK,GAAjB,GAACK,IAA4BA,GAAG,IAAHA,CAAAA,IAAYL,KAAK,GADzD,GACL,CADK;AAGP,OAAO,SAAA,iBAAA,CAAA,MAAA,EAAA,QAAA,EAGL;AACA,MAAI,CAAJ,QAAA,EAAe;AACbM,IAAAA,MAAM;AACN,WAAA,IAAA;AACD;;AACD,SAAOC,UAAU,CAAC,MAAMD,MAAP,EAAA,EAAjB,QAAiB,CAAjB;AACD","sourcesContent":["// TODO(TS) remove if not necessary after rewrite\nexport const isnan = (v: unknown) => Number.isNaN(v);\n\n// TODO(TS) remove if not necessary after rewrite\nexport const isValidNumber = (v: unknown) =>\n  typeof v === 'number' && !Number.isNaN(v);\n\nexport const TEST_MIN_IF_NOT_NAN = (value: number, limit: number): boolean =>\n  !isnan(limit) &&\n  ((limit < 0 && value <= limit) || (limit >= 0 && value >= limit));\nexport const VEC_LEN_SQ = ({ x = 0, y = 0 } = {}) => x * x + y * y;\nexport const TEST_MAX_IF_NOT_NAN = (value: number, max: number) =>\n  !isnan(max) && ((max < 0 && value < max) || (max >= 0 && value > max));\n\nexport function fireAfterInterval(\n  method: () => void,\n  interval?: number | boolean\n) {\n  if (!interval) {\n    method();\n    return null;\n  }\n  return setTimeout(() => method(), interval);\n}\n"]},"metadata":{},"sourceType":"module"}