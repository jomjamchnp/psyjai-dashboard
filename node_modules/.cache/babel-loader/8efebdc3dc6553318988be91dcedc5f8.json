{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\n\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"pressInTimeout\", void 0);\n\n    _defineProperty(this, \"pressOutTimeout\", void 0);\n\n    _defineProperty(this, \"longPressTimeout\", void 0);\n\n    _defineProperty(this, \"longPressDetected\", false);\n\n    _defineProperty(this, \"pointerInside\", true);\n\n    _defineProperty(this, \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n\n    _defineProperty(this, \"onGestureEvent\", ({\n      nativeEvent: {\n        pointerInside\n      }\n    }) => {\n      if (this.pointerInside !== pointerInside) {\n        if (pointerInside) {\n          this.onMoveIn();\n        } else {\n          this.onMoveOut();\n        }\n      }\n\n      this.pointerInside = pointerInside;\n    });\n\n    _defineProperty(this, \"onHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      const {\n        state\n      } = nativeEvent;\n\n      if (state === State.CANCELLED || state === State.FAILED) {\n        // Need to handle case with external cancellation (e.g. by ScrollView)\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n      } else if ( // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        // Moving inside requires\n        this.handlePressIn();\n      } else if (state === State.END) {\n        const shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n        this.handleGoToUndetermined();\n\n        if (shouldCallOnPress) {\n          var _this$props$onPress, _this$props; // Calls only inside component whether no long press was called previously\n\n\n          (_this$props$onPress = (_this$props = this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);\n        }\n      }\n    });\n\n    _defineProperty(this, \"onLongPressDetected\", () => {\n      var _this$props$onLongPre, _this$props2;\n\n      this.longPressDetected = true; // checked for in the caller of `onLongPressDetected`, but better to check twice\n\n      (_this$props$onLongPre = (_this$props2 = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);\n    });\n  } // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n\n\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n\n    if (this.props.onLongPress) {\n      const time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  } // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n\n\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = this.pressOutTimeout || setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  } // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n\n\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout); // TODO: maybe it can be undefined\n\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  } // reset timeout to prevent memory leaks.\n\n\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  } // All states' transitions are defined here.\n\n\n  moveToState(newState) {\n    var _this$props$onStateCh, _this$props6;\n\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      var _this$props$onPressIn, _this$props3; // First touch and moving inside\n\n\n      (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      var _this$props$onPressOu, _this$props4; // Moving outside\n\n\n      (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        var _this$props$onPressOu2, _this$props5; // ... and if it happens inside button.\n\n\n        (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);\n      }\n    } // Finally call lister (used by subclasses)\n\n\n    (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState); // ... and make transition.\n\n    this.STATE = newState;\n  }\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop\n    };\n    return /*#__PURE__*/React.createElement(BaseButton, _extends({\n      style: this.props.containerStyle,\n      onHandlerStateChange: // TODO: not sure if it can be undefined instead of null\n      this.props.disabled ? undefined : this.onHandlerStateChange,\n      onGestureEvent: this.onGestureEvent,\n      hitSlop: this.props.hitSlop,\n      shouldActivateOnStart: this.props.shouldActivateOnStart,\n      disallowInterruption: this.props.disallowInterruption,\n      testID: this.props.testID\n    }, this.props.extraButtonProps), /*#__PURE__*/React.createElement(Animated.View, _extends({}, coreProps, {\n      style: this.props.style\n    }), this.props.children));\n  }\n\n}\n\n_defineProperty(GenericTouchable, \"defaultProps\", {\n  delayLongPress: 600,\n  extraButtonProps: {\n    rippleColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["GenericTouchable.tsx"],"names":["TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","delayLongPress","extraButtonProps","rippleColor","handlePressIn","setTimeout","time","handleMoveOutside","handleGoToUndetermined","clearTimeout","componentDidMount","reset","moveToState","newState","nativeEvent","pointerInside","state","State","Platform","shouldCallOnPress","componentWillUnmount","onMoveIn","onMoveOut","render","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","nativeID","onLayout","hitSlop","testID","style"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../../handlers/gestureHandlers';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\n\nexport interface GenericTouchableProps extends TouchableWithoutFeedbackProps {\n  // Decided to drop not used fields from RN's implementation.\n  // e.g. onBlur and onFocus as well as deprecated props. - TODO: this comment may be unuseful in this moment\n\n  // TODO: in RN these events get native event parameter, which prolly could be used in our implementation too\n  onPress?: () => void;\n  onPressIn?: () => void;\n  onPressOut?: () => void;\n  onLongPress?: () => void;\n\n  nativeID?: string;\n  shouldActivateOnStart?: boolean;\n  disallowInterruption?: boolean;\n\n  containerStyle?: StyleProp<ViewStyle>;\n}\n\ninterface InternalProps {\n  extraButtonProps: TouchableNativeFeedbackExtraProps;\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n    },\n  };\n\n  // timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // to prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n      hitSlop: this.props.hitSlop,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={this.props.hitSlop}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}