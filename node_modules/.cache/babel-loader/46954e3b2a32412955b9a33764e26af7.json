{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable, { TOUCHABLE_STATE } from './GenericTouchable';\nimport { StyleSheet, View } from 'react-native';\n/**\n * TouchableHighlight follows RN's implementation\n */\n\nexport default class TouchableHighlight extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"showUnderlay\", () => {\n      var _this$props$onShowUnd, _this$props;\n\n      if (!this.hasPressHandler()) {\n        return;\n      }\n\n      this.setState({\n        extraChildStyle: {\n          opacity: this.props.activeOpacity\n        },\n        extraUnderlayStyle: {\n          backgroundColor: this.props.underlayColor\n        }\n      });\n      (_this$props$onShowUnd = (_this$props = this.props).onShowUnderlay) === null || _this$props$onShowUnd === void 0 ? void 0 : _this$props$onShowUnd.call(_this$props);\n    });\n\n    _defineProperty(this, \"hasPressHandler\", () => this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);\n\n    _defineProperty(this, \"hideUnderlay\", () => {\n      var _this$props$onHideUnd, _this$props2;\n\n      this.setState({\n        extraChildStyle: null,\n        extraUnderlayStyle: null\n      });\n      (_this$props$onHideUnd = (_this$props2 = this.props).onHideUnderlay) === null || _this$props$onHideUnd === void 0 ? void 0 : _this$props$onHideUnd.call(_this$props2);\n    });\n\n    _defineProperty(this, \"onStateChange\", (_from, to) => {\n      if (to === TOUCHABLE_STATE.BEGAN) {\n        this.showUnderlay();\n      } else if (to === TOUCHABLE_STATE.UNDETERMINED || to === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n        this.hideUnderlay();\n      }\n    });\n\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null\n    };\n  } // Copied from RN\n\n\n  renderChildren() {\n    if (!this.props.children) {\n      return /*#__PURE__*/React.createElement(View, null);\n    }\n\n    const child = React.Children.only(this.props.children); // TODO: not sure if OK but fixes error\n\n    return /*#__PURE__*/React.cloneElement(child, {\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle)\n    });\n  }\n\n  render() {\n    const {\n      style = {},\n      ...rest\n    } = this.props;\n    const {\n      extraUnderlayStyle\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GenericTouchable, _extends({}, rest, {\n      style: [style, extraUnderlayStyle],\n      onStateChange: this.onStateChange\n    }), this.renderChildren());\n  }\n\n}\n\n_defineProperty(TouchableHighlight, \"defaultProps\", { ...GenericTouchable.defaultProps,\n  activeOpacity: 0.85,\n  delayPressOut: 100,\n  underlayColor: 'black'\n});","map":{"version":3,"sources":["TouchableHighlight.tsx"],"names":["TouchableHighlight","GenericTouchable","activeOpacity","delayPressOut","underlayColor","constructor","extraChildStyle","extraUnderlayStyle","opacity","backgroundColor","renderChildren","child","React","style","StyleSheet","to","TOUCHABLE_STATE","render","rest","onStateChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable, {\n  GenericTouchableProps,\n  TOUCHABLE_STATE,\n} from './GenericTouchable';\nimport {\n  StyleSheet,\n  View,\n  TouchableHighlightProps,\n  ColorValue,\n  ViewProps,\n} from 'react-native';\n\ninterface State {\n  extraChildStyle: null | {\n    opacity?: number;\n  };\n  extraUnderlayStyle: null | {\n    backgroundColor?: ColorValue;\n  };\n}\n\n/**\n * TouchableHighlight follows RN's implementation\n */\nexport default class TouchableHighlight extends Component<\n  TouchableHighlightProps & GenericTouchableProps,\n  State\n> {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: 'black',\n  };\n\n  constructor(props: TouchableHighlightProps & GenericTouchableProps) {\n    super(props);\n    this.state = {\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    };\n  }\n\n  // Copied from RN\n  showUnderlay = () => {\n    if (!this.hasPressHandler()) {\n      return;\n    }\n    this.setState({\n      extraChildStyle: {\n        opacity: this.props.activeOpacity,\n      },\n      extraUnderlayStyle: {\n        backgroundColor: this.props.underlayColor,\n      },\n    });\n    this.props.onShowUnderlay?.();\n  };\n\n  hasPressHandler = () =>\n    this.props.onPress ||\n    this.props.onPressIn ||\n    this.props.onPressOut ||\n    this.props.onLongPress;\n\n  hideUnderlay = () => {\n    this.setState({\n      extraChildStyle: null,\n      extraUnderlayStyle: null,\n    });\n    this.props.onHideUnderlay?.();\n  };\n\n  renderChildren() {\n    if (!this.props.children) {\n      return <View />;\n    }\n\n    const child = React.Children.only(\n      this.props.children\n    ) as React.ReactElement<ViewProps>; // TODO: not sure if OK but fixes error\n    return React.cloneElement(child, {\n      style: StyleSheet.compose(child.props.style, this.state.extraChildStyle),\n    });\n  }\n\n  onStateChange = (_from: number, to: number) => {\n    if (to === TOUCHABLE_STATE.BEGAN) {\n      this.showUnderlay();\n    } else if (\n      to === TOUCHABLE_STATE.UNDETERMINED ||\n      to === TOUCHABLE_STATE.MOVED_OUTSIDE\n    ) {\n      this.hideUnderlay();\n    }\n  };\n\n  render() {\n    const { style = {}, ...rest } = this.props;\n    const { extraUnderlayStyle } = this.state;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={[style, extraUnderlayStyle]}\n        onStateChange={this.onStateChange}>\n        {this.renderChildren()}\n      </GenericTouchable>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}