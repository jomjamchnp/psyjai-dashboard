{"ast":null,"code":"import interpolateNode, { Extrapolate } from '../derived/interpolate';\n\nfunction getVal(config) {\n  'worklet';\n\n  const {\n    type,\n    coef,\n    val,\n    ll,\n    rr,\n    x\n  } = config;\n\n  switch (type) {\n    case Extrapolate.IDENTITY:\n      return x;\n\n    case Extrapolate.CLAMP:\n      if (coef * val < coef * ll) {\n        return ll;\n      }\n\n      return rr;\n\n    case Extrapolate.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return value === Extrapolate.EXTEND || value === Extrapolate.CLAMP || value === Extrapolate.IDENTITY;\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n\n  const EXTRAPOLATE_ERROR = extrapolate => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n\n  type = type ?? 'extend'; // eslint-disable-next-line no-prototype-builtins\n\n  const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft'); // eslint-disable-next-line no-prototype-builtins\n\n  const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n  if (typeof type === 'object' && (Object.keys(type).length === 2 && !(hasExtrapolateLeft && hasExtrapolateRight) || Object.keys(type).length === 1 && !(hasExtrapolateLeft || hasExtrapolateRight) || Object.keys(type).length > 2)) {\n    throw new Error(EXTRAPOLATE_ERROR_MSG);\n  }\n\n  if (typeof type === 'object') {\n    if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n    }\n\n    if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n    }\n  }\n\n  if (typeof type === 'string' && !isExtrapolate(type)) {\n    throw new Error(`Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`);\n  }\n} // TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\n\n\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n  'worklet';\n\n  if (r - l === 0) return ll;\n  const progress = (x - l) / (r - l);\n  const val = ll + progress * (rr - ll);\n  const coef = rr >= ll ? 1 : -1;\n  const config = {\n    type,\n    coef,\n    val,\n    ll,\n    rr,\n    x\n  };\n  validateType(type);\n\n  if (typeof type === 'object') {\n    if (coef * val < coef * ll) {\n      return getVal(Object.assign(config, {\n        type: type.extrapolateLeft\n      }));\n    } else if (coef * val > coef * ll) {\n      return getVal(Object.assign(config, {\n        type: type.extrapolateRight\n      }));\n    }\n  }\n\n  if (coef * val < coef * ll || coef * val > coef * rr) {\n    return getVal(config);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n\n  if (x && x.__nodeID) {\n    console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n    return interpolateNode.apply(undefined, arguments);\n  }\n\n  const length = input.length;\n  let narrowedInput = [];\n\n  if (x < input[0]) {\n    narrowedInput = [input[0], input[1], output[0], output[1]];\n  } else if (x > input[length - 1]) {\n    narrowedInput = [input[length - 2], input[length - 1], output[length - 2], output[length - 1]];\n  } else {\n    for (let i = 1; i < length; ++i) {\n      if (x <= input[i]) {\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n        break;\n      }\n    }\n  }\n\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}","map":{"version":3,"sources":["D:/dash_kol/my-app/node_modules/react-native-reanimated/src/reanimated2/interpolation.js"],"names":["interpolateNode","Extrapolate","getVal","config","type","coef","val","ll","rr","x","IDENTITY","CLAMP","EXTEND","isExtrapolate","value","validateType","EXTRAPOLATE_ERROR_MSG","EXTRAPOLATE_ERROR","extrapolate","hasExtrapolateLeft","hasOwnProperty","hasExtrapolateRight","Object","keys","length","Error","extrapolateLeft","extrapolateRight","internalInterpolate","l","r","progress","assign","interpolate","input","output","__nodeID","console","warn","apply","undefined","arguments","narrowedInput","i","concat"],"mappings":"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","sourcesContent":["import interpolateNode,{\n  Extrapolate\n} from '../derived/interpolate';\n\nfunction getVal(config) {\n  'worklet';\n\n  const { type, coef, val, ll, rr, x } = config;\n\n  switch (type) {\n    case Extrapolate.IDENTITY:\n      return x;\n    case Extrapolate.CLAMP:\n      if (coef * val < coef * ll) {\n        return ll;\n      }\n      return rr;\n    case Extrapolate.EXTEND:\n    default:\n      return val;\n  }\n}\n\nfunction isExtrapolate(value) {\n  'worklet';\n\n  return (\n    value === Extrapolate.EXTEND ||\n    value === Extrapolate.CLAMP ||\n    value === Extrapolate.IDENTITY\n  );\n}\n\nfunction validateType(type) {\n  'worklet';\n\n  const EXTRAPOLATE_ERROR_MSG = `Reanimated: config object is not valid, please provide valid config, for example:\n    interpolate(value, [inputRange], [outputRange], {\n    extrapolateLeft: 'clamp',\n    extrapolateRight: 'extend',\n  })`;\n\n  const EXTRAPOLATE_ERROR = (\n    extrapolate\n  ) => `Reanimated: not supported value for \"${extrapolate}\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n    interpolate(value, [inputRange], [outputRange], {\n      ${extrapolate}: 'clamp',\n  })`;\n\n  type = type ?? 'extend';\n\n  // eslint-disable-next-line no-prototype-builtins\n  const hasExtrapolateLeft = type.hasOwnProperty('extrapolateLeft');\n  // eslint-disable-next-line no-prototype-builtins\n  const hasExtrapolateRight = type.hasOwnProperty('extrapolateRight');\n\n  if (\n    typeof type === 'object' &&\n    ((Object.keys(type).length === 2 &&\n      !(hasExtrapolateLeft && hasExtrapolateRight)) ||\n      (Object.keys(type).length === 1 &&\n        !(hasExtrapolateLeft || hasExtrapolateRight)) ||\n      Object.keys(type).length > 2)\n  ) {\n    throw new Error(EXTRAPOLATE_ERROR_MSG);\n  }\n\n  if (typeof type === 'object') {\n    if (hasExtrapolateLeft && !isExtrapolate(type.extrapolateLeft)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateLeft'));\n    }\n\n    if (hasExtrapolateRight && !isExtrapolate(type.extrapolateRight)) {\n      throw new Error(EXTRAPOLATE_ERROR('extrapolateRight'));\n    }\n  }\n\n  if (typeof type === 'string' && !isExtrapolate(type)) {\n    throw new Error(\n      `Reanimated: not supported value for \"interpolate\" \\nSupported values: [\"extend\", \"clamp\", \"identity\"]\\n Valid example:\n       interpolate(value, [inputRange], [outputRange], \"clamp\")`\n    );\n  }\n}\n\n// TODO: support default values in worklets:\n// e.g. function interpolate(x, input, output, type = Extrapolate.CLAMP)\nfunction internalInterpolate(x, l, r, ll, rr, type) {\n  'worklet';\n  if (r - l === 0) return ll;\n  const progress = (x - l) / (r - l);\n  const val = ll + progress * (rr - ll);\n  const coef = rr >= ll ? 1 : -1;\n\n  const config = { type, coef, val, ll, rr, x };\n\n  validateType(type);\n\n  if (typeof type === 'object') {\n    if (coef * val < coef * ll) {\n      return getVal(Object.assign(config, { type: type.extrapolateLeft }));\n    } else if (coef * val > coef * ll) {\n      return getVal(Object.assign(config, { type: type.extrapolateRight }));\n    }\n  }\n\n  if (coef * val < coef * ll || coef * val > coef * rr) {\n    return getVal(config);\n  }\n\n  return val;\n}\n\nexport function interpolate(x, input, output, type) {\n  'worklet';\n  if (x && x.__nodeID) {\n    console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);\n    return interpolateNode.apply(undefined, arguments);\n  }\n\n  const length = input.length;\n  let narrowedInput = [];\n  if (x < input[0]) {\n    narrowedInput = [input[0], input[1], output[0], output[1]];\n  } else if (x > input[length - 1]) {\n    narrowedInput = [\n      input[length - 2],\n      input[length - 1],\n      output[length - 2],\n      output[length - 1],\n    ];\n  } else {\n    for (let i = 1; i < length; ++i) {\n      if (x <= input[i]) {\n        narrowedInput = [input[i - 1], input[i], output[i - 1], output[i]];\n        break;\n      }\n    }\n  }\n  return internalInterpolate.apply({}, [x].concat(narrowedInput).concat(type));\n}\n"]},"metadata":{},"sourceType":"module"}