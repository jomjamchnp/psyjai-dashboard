{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusedListeners from './useFocusedListeners';\nimport useDevTools from './useDevTools';\nimport useStateGetters from './useStateGetters';\nimport isSerializable from './isSerializable';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started for setup instructions.\";\nconst NOT_INITIALIZED_ERROR = \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\nexport const NavigationStateContext = React.createContext({\n  isDefault: true,\n\n  get getKey() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get setKey() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get getState() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n\n  get setState() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n\n});\nlet hasWarnedForSerialization = false;\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\n\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  const {\n    key,\n    routeNames\n  } = state,\n        partialState = _objectWithoutProperties(state, [\"key\", \"routeNames\"]); // @ts-ignore\n\n\n  return _objectSpread({}, partialState, {\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n\n      return _objectSpread({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\n\nconst BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer({\n  initialState,\n  onStateChange,\n  independent,\n  children\n}, ref) {\n  const parent = React.useContext(NavigationStateContext);\n\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n\n  const [state, getState, setState] = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const skipTrackingRef = React.useRef(false);\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const reset = React.useCallback(state => {\n    skipTrackingRef.current = true;\n    setState(state);\n  }, [setState]);\n  const {\n    trackState,\n    trackAction\n  } = useDevTools({\n    enabled: false,\n    name: '@react-navigation',\n    reset,\n    state\n  });\n  const {\n    listeners,\n    addListener: addFocusedListener\n  } = useFocusedListeners();\n  const {\n    getStateForRoute,\n    addStateGetter\n  } = useStateGetters();\n\n  const dispatch = action => {\n    if (listeners[0] == null) {\n      throw new Error(NOT_INITIALIZED_ERROR);\n    }\n\n    listeners[0](navigation => navigation.dispatch(action));\n  };\n\n  const canGoBack = () => {\n    if (listeners[0] == null) {\n      return false;\n    }\n\n    const {\n      result,\n      handled\n    } = listeners[0](navigation => navigation.canGoBack());\n\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  };\n\n  const resetRoot = React.useCallback(state => {\n    trackAction('@@RESET_ROOT');\n    setState(state);\n  }, [setState, trackAction]);\n  const getRootState = React.useCallback(() => {\n    return getStateForRoute('root');\n  }, [getStateForRoute]);\n  const emitter = useEventEmitter();\n  React.useImperativeHandle(ref, () => _objectSpread({}, Object.keys(CommonActions).reduce((acc, name) => {\n    acc[name] = (...args) => dispatch(CommonActions[name]( // @ts-ignore\n    ...args));\n\n    return acc;\n  }, {}), {}, emitter.create('root'), {\n    resetRoot,\n    dispatch,\n    canGoBack,\n    getRootState\n  }));\n  const builderContext = React.useMemo(() => ({\n    addFocusedListener,\n    addStateGetter,\n    trackAction\n  }), [addFocusedListener, trackAction, addStateGetter]);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey\n  }), [getKey, getState, setKey, setState, state]);\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (state !== undefined && !isSerializable(state) && !hasWarnedForSerialization) {\n        hasWarnedForSerialization = true;\n        console.warn(\"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\");\n      }\n    }\n\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n\n    if (skipTrackingRef.current) {\n      skipTrackingRef.current = false;\n    } else {\n      trackState(getRootState);\n    }\n\n    if (!isFirstMountRef.current && onStateChange) {\n      onStateChange(getRootState());\n    }\n\n    isFirstMountRef.current = false;\n  }, [onStateChange, trackState, getRootState, emitter, state]);\n  return React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, React.createElement(EnsureSingleNavigator, null, children)));\n});\nexport default BaseNavigationContainer;","map":{"version":3,"sources":["BaseNavigationContainer.tsx"],"names":["MISSING_CONTEXT_ERROR","NOT_INITIALIZED_ERROR","NavigationStateContext","isDefault","hasWarnedForSerialization","getPartialState","state","routeNames","partialState","stale","routes","route","BaseNavigationContainer","children","parent","React","useSyncState","initialState","isFirstMountRef","skipTrackingRef","navigatorKeyRef","getKey","setKey","key","reset","setState","trackAction","useDevTools","enabled","name","addListener","addFocusedListener","useFocusedListeners","addStateGetter","useStateGetters","dispatch","action","listeners","navigation","canGoBack","handled","resetRoot","getRootState","getStateForRoute","emitter","useEventEmitter","Object","acc","builderContext","context","process","isSerializable","console","type","data","trackState","onStateChange"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  Route,\n  NavigationState,\n  InitialState,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useFocusedListeners from './useFocusedListeners';\nimport useDevTools from './useDevTools';\nimport useStateGetters from './useStateGetters';\nimport isSerializable from './isSerializable';\n\nimport { NavigationContainerRef, NavigationContainerProps } from './types';\nimport useEventEmitter from './useEventEmitter';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst MISSING_CONTEXT_ERROR =\n  \"Couldn't find a navigation context. Have you wrapped your app with 'NavigationContainer'? See https://reactnavigation.org/docs/getting-started for setup instructions.\";\n\nconst NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport const NavigationStateContext = React.createContext<{\n  isDefault?: true;\n  state?: NavigationState | PartialState<NavigationState>;\n  getKey: () => string | undefined;\n  setKey: (key: string) => void;\n  getState: () => NavigationState | PartialState<NavigationState> | undefined;\n  setState: (\n    state: NavigationState | PartialState<NavigationState> | undefined\n  ) => void;\n}>({\n  isDefault: true,\n\n  get getKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setKey(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get getState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  get setState(): any {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\nlet hasWarnedForSerialization = false;\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  // @ts-ignore\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref: React.Ref<NavigationContainerRef>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitely. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState] = useSyncState<State>(() =>\n      getPartialState(initialState == null ? undefined : initialState)\n    );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n    const skipTrackingRef = React.useRef<boolean>(false);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const reset = React.useCallback(\n      (state: NavigationState) => {\n        skipTrackingRef.current = true;\n        setState(state);\n      },\n      [setState]\n    );\n\n    const { trackState, trackAction } = useDevTools({\n      enabled: false,\n      name: '@react-navigation',\n      reset,\n      state,\n    });\n\n    const {\n      listeners,\n      addListener: addFocusedListener,\n    } = useFocusedListeners();\n\n    const { getStateForRoute, addStateGetter } = useStateGetters();\n\n    const dispatch = (\n      action: NavigationAction | ((state: NavigationState) => NavigationAction)\n    ) => {\n      if (listeners[0] == null) {\n        throw new Error(NOT_INITIALIZED_ERROR);\n      }\n\n      listeners[0](navigation => navigation.dispatch(action));\n    };\n\n    const canGoBack = () => {\n      if (listeners[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners[0](navigation =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    };\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        trackAction('@@RESET_ROOT');\n        setState(state);\n      },\n      [setState, trackAction]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return getStateForRoute('root');\n    }, [getStateForRoute]);\n\n    const emitter = useEventEmitter();\n\n    React.useImperativeHandle(ref, () => ({\n      ...(Object.keys(CommonActions) as (keyof typeof CommonActions)[]).reduce<\n        any\n      >((acc, name) => {\n        acc[name] = (...args: any[]) =>\n          dispatch(\n            CommonActions[name](\n              // @ts-ignore\n              ...args\n            )\n          );\n        return acc;\n      }, {}),\n      ...emitter.create('root'),\n      resetRoot,\n      dispatch,\n      canGoBack,\n      getRootState,\n    }));\n\n    const builderContext = React.useMemo(\n      () => ({\n        addFocusedListener,\n        addStateGetter,\n        trackAction,\n      }),\n      [addFocusedListener, trackAction, addStateGetter]\n    );\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n      }),\n      [getKey, getState, setKey, setState, state]\n    );\n\n    React.useEffect(() => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          state !== undefined &&\n          !isSerializable(state) &&\n          !hasWarnedForSerialization\n        ) {\n          hasWarnedForSerialization = true;\n\n          console.warn(\n            \"Non-serializable values were found in the navigation state, which can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.\"\n          );\n        }\n      }\n\n      emitter.emit({\n        type: 'state',\n        data: { state },\n      });\n\n      if (skipTrackingRef.current) {\n        skipTrackingRef.current = false;\n      } else {\n        trackState(getRootState);\n      }\n\n      if (!isFirstMountRef.current && onStateChange) {\n        onStateChange(getRootState());\n      }\n\n      isFirstMountRef.current = false;\n    }, [onStateChange, trackState, getRootState, emitter, state]);\n\n    return (\n      <NavigationBuilderContext.Provider value={builderContext}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationBuilderContext.Provider>\n    );\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}