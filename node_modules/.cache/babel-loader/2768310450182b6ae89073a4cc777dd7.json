{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos'\n  };\n  const {\n    state,\n    descriptors,\n    navigation\n  } = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions: typeof screenOptions === 'function' ? (...args) => ({ ...defaultOptions,\n      ...screenOptions(...args)\n    }) : { ...defaultOptions,\n      ...screenOptions\n    }\n  });\n  React.useEffect(() => {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', e => {\n      const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          // When user taps on already focused tab and we're inside the tab,\n          // reset the stack to replicate native behaviour\n          navigation.dispatch({ ...StackActions.popToTop(),\n            target: state.key\n          });\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","defaultOptions","gestureEnabled","Platform","animationEnabled","navigation","useNavigationBuilder","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,QAAA,cAAA;AACA,SAAA,oBAAA,EAAA,sBAAA,EAAA,WAAA,EAAA,YAAA,QAAA,0BAAA;AAYA,OAAA,SAAA,MAAA,0BAAA;;AAWA,SAAA,cAAA,CAAwB;AAAA,EAAA,gBAAA;AAAA,EAAA,QAAA;AAAA,EAAA,aAAA;AAItB,KAAGA;AAJmB,CAAxB,EAKU;AACR,QAAMC,cAAc,GAAG;AACrBC,IAAAA,cAAc,EAAEC,QAAQ,CAARA,EAAAA,KADK,KAAA;AAErBC,IAAAA,gBAAgB,EACdD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IACAA,QAAQ,CAARA,EAAAA,KADAA,SAAAA,IAEAA,QAAQ,CAARA,EAAAA,KAAgB;AALG,GAAvB;AAQA,QAAM;AAAA,IAAA,KAAA;AAAA,IAAA,WAAA;AAAsBE,IAAAA;AAAtB,MAAqCC,oBAAoB,CAAA,WAAA,EAMhD;AAAA,IAAA,gBAAA;AAAA,IAAA,QAAA;AAGbC,IAAAA,aAAa,EACX,OAAA,aAAA,KAAA,UAAA,GACI,CAAC,GAAD,IAAA,MAAc,EACZ,GADY,cAAA;AAEZ,SAAGA,aAAa,CAAC,GAAD,IAAA;AAFJ,KAAd,CADJ,GAKI,EACE,GADF,cAAA;AAEE,SAAGA;AAFL;AATO,GANgD,CAA/D;AAqBAC,EAAAA,KAAK,CAALA,SAAAA,CACE,MAAA;AAAA,QAAA,qBAAA;;AAAA,WAAA,CAAA,qBAAA,GACEH,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAsCI,CAAD,IAAO;AAC1C,YAAMC,SAAS,GAAGL,UAAU,CADc,SACxBA,EAAlB,CAD0C,CAG1C;AACA;;AACAM,MAAAA,qBAAqB,CAAC,MAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AACA;AACA;AACAJ,UAAAA,UAAU,CAAVA,QAAAA,CAAoB,EAClB,GAAGQ,YAAY,CADG,QACfA,EADe;AAElBC,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFI,WAApBV;AAID;AAZHM,OAAqB,CAArBA;AANJ,KACEN,CADF;AADFG,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEH;AAJd,GAAA,CAAA,CADF;AAQD;;AAED,eAAeW,sBAAsB,CAArC,cAAqC,CAArC","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  useNavigationBuilder,\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  StackRouter,\n  StackRouterOptions,\n  StackNavigationState,\n  StackActions,\n  ParamListBase,\n  StackActionHelpers,\n} from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\nimport type {\n  StackNavigationConfig,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n} from '../types';\n\ntype Props = DefaultNavigatorOptions<StackNavigationOptions> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenOptions,\n  ...rest\n}: Props) {\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n  };\n\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    StackNavigationOptions,\n    StackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions:\n      typeof screenOptions === 'function'\n        ? (...args) => ({\n            ...defaultOptions,\n            ...screenOptions(...args),\n          })\n        : {\n            ...defaultOptions,\n            ...screenOptions,\n          },\n  });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <StackView\n      {...rest}\n      state={state}\n      descriptors={descriptors}\n      navigation={navigation}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"module"}