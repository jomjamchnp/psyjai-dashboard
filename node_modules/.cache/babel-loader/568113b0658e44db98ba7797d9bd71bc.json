{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nexport default function useOnGetState({\n  getStateForRoute,\n  getState\n}) {\n  const {\n    addStateGetter\n  } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n    return _objectSpread({}, state, {\n      routes: state.routes.map(route => _objectSpread({}, route, {\n        state: getStateForRoute(route.key)\n      }))\n    });\n  }, [getState, getStateForRoute]);\n  React.useEffect(() => {\n    return addStateGetter === null || addStateGetter === void 0 ? void 0 : addStateGetter(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getState","addStateGetter","React","route","key","getRehydratedState","state","routes","getStateForRoute"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA,MAAA,4BAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;AAEA,eAAe,SAAA,aAAA,CAAuB;AAAA,EAAA,gBAAA;AAEpCA,EAAAA;AAFoC,CAAvB,EAMZ;AACD,QAAM;AAAEC,IAAAA;AAAF,MAAqBC,KAAK,CAALA,UAAAA,CAA3B,wBAA2BA,CAA3B;AACA,QAAMC,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAd,sBAAcA,CAAd;AACA,QAAME,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,QAAME,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,MAAM;AACjD,UAAMC,KAAK,GAAGN,QAAd,EAAA;AACA,WAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEEO,MAAAA,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiBJ,KAAK,IAAA,aAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAE5BG,QAAAA,KAAK,EAAEE,gBAAgB,CAACL,KAAK,CAAN,GAAA;AAFK,OAAA,CAAtB;AAFV,KAAA,CAAA;AAFyB,GAAA,EASxB,CAAA,QAAA,EATH,gBASG,CATwB,CAA3B;AAWAD,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,WAAOD,cAAP,KAAA,IAAOA,IAAAA,cAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,cAAc,CAAA,GAAA,EAArB,kBAAqB,CAArB;AADFC,GAAAA,EAEG,CAAA,cAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\nexport default function useOnGetState({\n  getStateForRoute,\n  getState,\n}: {\n  getStateForRoute: (routeName: string) => NavigationState | undefined;\n  getState: () => NavigationState;\n}) {\n  const { addStateGetter } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n    return {\n      ...state,\n      routes: state.routes.map(route => ({\n        ...route,\n        state: getStateForRoute(route.key),\n      })),\n    };\n  }, [getState, getStateForRoute]);\n\n  React.useEffect(() => {\n    return addStateGetter?.(key, getRehydratedState);\n  }, [addStateGetter, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"module"}