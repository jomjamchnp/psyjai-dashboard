{"ast":null,"code":"var _Screens;\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, Platform } from 'react-native';\nlet Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {// Ignore\n} // The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\n\n\nclass WebScreen extends React.Component {\n  render() {\n    const {\n      active,\n      style,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n    , _extends({\n      hidden: !active,\n      style: [style, {\n        display: active ? 'flex' : 'none'\n      }]\n    }, rest));\n  }\n\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen); // @ts-ignore\n\nexport const shouldUseActivityState = (_Screens = Screens) === null || _Screens === void 0 ? void 0 : _Screens.shouldUseActivityState;\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}) => {\n  var _Screens2;\n\n  if (enabled && Platform.OS !== 'web' && (_Screens2 = Screens) !== null && _Screens2 !== void 0 && _Screens2.screensEnabled()) {\n    return (\n      /*#__PURE__*/\n      // @ts-ignore\n      React.createElement(Screens.ScreenContainer, _extends({\n        enabled: enabled\n      }, rest))\n    );\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}) => {\n  var _Screens3;\n\n  if (enabled && Platform.OS === 'web') {\n    return /*#__PURE__*/React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && (_Screens3 = Screens) !== null && _Screens3 !== void 0 && _Screens3.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        /*#__PURE__*/\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          activityState: active\n        }, rest))\n      );\n    } else {\n      return (\n        /*#__PURE__*/\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        React.createElement(Screens.Screen, _extends({\n          enabled: enabled,\n          active: active\n        }, rest))\n      );\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","render","rest","display","active","AnimatedWebScreen","Animated","shouldUseActivityState","MaybeScreenContainer","enabled","Platform","MaybeScreen"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\n// @ts-ignore\nexport const shouldUseActivityState = Screens?.shouldUseActivityState;\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens?.screensEnabled()) {\n    return (\n      // @ts-ignore\n      <Screens.ScreenContainer enabled={enabled} {...rest} />\n    );\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | 2 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens?.screensEnabled()) {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} activityState={active} {...rest} />\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screens.Screen enabled={enabled} active={active} {...rest} />\n      );\n    }\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}