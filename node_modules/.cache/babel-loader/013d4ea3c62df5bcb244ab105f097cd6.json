{"ast":null,"code":"/* global _WORKLET */\n\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n\n/* eslint no-bitwise: 0 */\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable } from './core';\nimport { interpolate } from './interpolation';\nimport { Extrapolate } from '../derived'; // var INTEGER = '[-+]?\\\\d+';\n\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args) {\n  'worklet';\n\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n} // matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\n\n\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n\n  const cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n    cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n    cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n\n  return cachedMatchers;\n} // cachedMatchers is lazy loaded and it is frozen when worklet is being created,\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\n// has no assigned regexes\n\n\ngetMatchers();\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  'worklet';\n\n  const int = Number.parseInt(str, 10);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 255) {\n    return 255;\n  }\n\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n\n  const int = Number.parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n\n  const num = Number.parseFloat(str);\n\n  if (num < 0) {\n    return 0;\n  }\n\n  if (num > 1) {\n    return 255;\n  }\n\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet'; // parseFloat conveniently ignores the final %\n\n  const int = Number.parseFloat(str);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 100) {\n    return 1;\n  }\n\n  return int / 100;\n}\n\nconst names = makeShareable({\n  transparent: 0x00000000,\n  // http://www.w3.org/TR/css3-color/#svg-color\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n  let match; // Ordered based on occurrences on Facebook codebase\n\n  if (match = matchers.hex6.exec(color)) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if (match = matchers.rgb.exec(color)) {\n    return (// b\n      (parse255(match[1]) << 24 | // r\n      parse255(match[2]) << 16 | // g\n      parse255(match[3]) << 8 | 0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if (match = matchers.rgba.exec(color)) {\n    return (// b\n      (parse255(match[1]) << 24 | // r\n      parse255(match[2]) << 16 | // g\n      parse255(match[3]) << 8 | parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  if (match = matchers.hex3.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    'ff', // a\n    16) >>> 0;\n  } // https://drafts.csswg.org/css-color-4/#hex-notation\n\n\n  if (match = matchers.hex8.exec(color)) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if (match = matchers.hex4.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + // r\n    match[2] + match[2] + // g\n    match[3] + match[3] + // b\n    match[4] + match[4], // a\n    16) >>> 0;\n  }\n\n  if (match = matchers.hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | 0x000000ff) >>> // a\n    0;\n  }\n\n  if (match = matchers.hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), // h\n    parsePercentage(match[2]), // s\n    parsePercentage(match[3]) // l\n    ) | parse1(match[4])) >>> // a\n    0;\n  }\n\n  return null;\n}\n\nexport const opacity = c => {\n  'worklet';\n\n  return (c >> 24 & 255) / 255;\n};\nexport const red = c => {\n  'worklet';\n\n  return c >> 16 & 255;\n};\nexport const green = c => {\n  'worklet';\n\n  return c >> 8 & 255;\n};\nexport const blue = c => {\n  'worklet';\n\n  return c & 255;\n};\nexport const rgbaColor = (r, g, b, alpha = 1) => {\n  'worklet';\n\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n\n  const a = Math.round(alpha * 255);\n  const c = a * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);\n\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return c < 1 << 31 >>> 0 ? c : c - Math.pow(2, 32);\n  }\n\n  return c;\n};\n/* accepts parameters\n * r  Object = {r:x, g:y, b:z}\n * OR\n * r, g, b\n * 0 <= r, g, b <= 255\n * returns 0 <= h, s, v <= 1\n */\n\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n  /* eslint-disable */\n\n  if (arguments.length === 1) {\n    g = r.g, b = r.b, r = r.r;\n  }\n\n  var max = Math.max(r, g, b),\n      min = Math.min(r, g, b),\n      d = max - min,\n      h,\n      s = max === 0 ? 0 : d / max,\n      v = max / 255;\n\n  switch (max) {\n    case min:\n      h = 0;\n      break;\n\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n  /* eslint-enable */\n}\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * 0 <= h, s, v <= 1\n * returns 0 <= r, g, b <= 255\n */\n\n\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n  /* eslint-disable */\n\n  var r, g, b, i, f, p, q, t;\n\n  if (arguments.length === 1) {\n    s = h.s, v = h.v, h = h.h;\n  }\n\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n\n    case 1:\n      r = q, g = v, b = p;\n      break;\n\n    case 2:\n      r = p, g = v, b = t;\n      break;\n\n    case 3:\n      r = p, g = q, b = v;\n      break;\n\n    case 4:\n      r = t, g = p, b = v;\n      break;\n\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n  /* eslint-enable */\n}\n\nexport const hsvToColor = (h, s, v) => {\n  'worklet';\n\n  const {\n    r,\n    g,\n    b\n  } = HSVtoRGB(h, s, v);\n  return rgbaColor(r, g, b);\n};\nexport function processColorInitially(color) {\n  'worklet';\n\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0; // argb\n\n  return normalizedColor;\n}\nexport function isColor(value) {\n  'worklet';\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return processColorInitially(value) != null;\n}\nexport function processColor(color) {\n  'worklet';\n\n  let normalizedColor = processColorInitially(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\nexport function convertToHSVA(color) {\n  'worklet';\n\n  const processedColor = processColorInitially(color); // argb;\n\n  const a = (processedColor >>> 24) / 255;\n  const r = processedColor << 8 >>> 24;\n  const g = processedColor << 16 >>> 24;\n  const b = processedColor << 24 >>> 24;\n  const {\n    h,\n    s,\n    v\n  } = RGBtoHSV(r, g, b);\n  return [h, s, v, a];\n}\nexport function toRGBA(HSVA) {\n  'worklet';\n\n  const {\n    r,\n    g,\n    b\n  } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n  return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\n\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n  'worklet';\n\n  const colorsAsHSV = colors.map(c => RGBtoHSV(c));\n  const h = interpolate(value, inputRange, colorsAsHSV.map(c => c.h), Extrapolate.CLAMP);\n  const s = interpolate(value, inputRange, colorsAsHSV.map(c => c.s), Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colorsAsHSV.map(c => c.v), Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n  'worklet';\n\n  const r = Math.round(interpolate(value, inputRange, colors.map(c => red(c)), Extrapolate.CLAMP));\n  const g = Math.round(interpolate(value, inputRange, colors.map(c => green(c)), Extrapolate.CLAMP));\n  const b = Math.round(interpolate(value, inputRange, colors.map(c => blue(c)), Extrapolate.CLAMP));\n  const a = interpolate(value, inputRange, colors.map(c => opacity(c)), Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\nexport const interpolateColor = (value, inputRange, outputRange, colorSpace = 'RGB') => {\n  'worklet';\n\n  outputRange = outputRange.map(c => processColor(c));\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, outputRange);\n  }\n\n  throw new Error(`invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);\n};","map":{"version":3,"sources":["D:/dash_kol/my-app/node_modules/react-native-reanimated/src/reanimated2/Colors.js"],"names":["Platform","makeRemote","makeShareable","interpolate","Extrapolate","NUMBER","PERCENTAGE","call","args","join","jsCachedMatchers","uiCachedMatchers","getMatchers","cachedMatchers","_WORKLET","rgb","undefined","RegExp","rgba","hsl","hsla","hex3","hex4","hex6","hex8","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Math","round","parse255","str","int","Number","parseInt","parse360","parseFloat","parse1","num","parsePercentage","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","normalizeColor","color","matchers","match","exec","opacity","c","rgbaColor","alpha","OS","a","pow","RGBtoHSV","arguments","length","max","min","d","v","HSVtoRGB","i","f","floor","hsvToColor","processColorInitially","normalizedColor","isColor","value","processColor","convertToHSVA","processedColor","toRGBA","HSVA","interpolateColorsHSV","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","interpolateColor","outputRange","colorSpace","Error"],"mappings":"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","sourcesContent":["/* global _WORKLET */\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n\n/* eslint no-bitwise: 0 */\n\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable } from './core';\nimport { interpolate } from './interpolation';\nimport { Extrapolate } from '../derived';\n\n// var INTEGER = '[-+]?\\\\d+';\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args) {\n  'worklet';\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\n// matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n  const cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp(\n      'rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)\n    );\n    cachedMatchers.hsl = new RegExp(\n      'hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)\n    );\n    cachedMatchers.hsla = new RegExp(\n      'hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)\n    );\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n  return cachedMatchers;\n}\n// cachedMatchers is lazy loaded and it is frozen when worklet is being created,\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\n// has no assigned regexes\ngetMatchers();\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n\n  return (\n    (Math.round(r * 255) << 24) |\n    (Math.round(g * 255) << 16) |\n    (Math.round(b * 255) << 8)\n  );\n}\n\nfunction parse255(str) {\n  'worklet';\n  const int = Number.parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n  const int = Number.parseFloat(str);\n  return (((int % 360) + 360) % 360) / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n  const num = Number.parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet';\n  // parseFloat conveniently ignores the final %\n  const int = Number.parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\n\nconst names = makeShareable({\n  transparent: 0x00000000,\n\n  // http://www.w3.org/TR/css3-color/#svg-color\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff,\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n\n  let match;\n\n  // Ordered based on occurrences on Facebook codebase\n  if ((match = matchers.hex6.exec(color))) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if ((match = matchers.rgb.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n        (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.rgba.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n        (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hex3.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          'ff', // a\n        16\n      ) >>> 0\n    );\n  }\n\n  // https://drafts.csswg.org/css-color-4/#hex-notation\n  if ((match = matchers.hex8.exec(color))) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if ((match = matchers.hex4.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          match[4] +\n          match[4], // a\n        16\n      ) >>> 0\n    );\n  }\n\n  if ((match = matchers.hsl.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hsla.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  return null;\n}\n\nexport const opacity = (c) => {\n  'worklet';\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c) => {\n  'worklet';\n  return (c >> 16) & 255;\n};\n\nexport const green = (c) => {\n  'worklet';\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c) => {\n  'worklet';\n  return c & 255;\n};\n\nexport const rgbaColor = (r, g, b, alpha = 1) => {\n  'worklet';\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n  const a = Math.round(alpha * 255);\n  const c =\n    a * (1 << 24) +\n    Math.round(r) * (1 << 16) +\n    Math.round(g) * (1 << 8) +\n    Math.round(b);\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return c < (1 << 31) >>> 0 ? c : c - Math.pow(2, 32);\n  }\n  return c;\n};\n\n/* accepts parameters\n * r  Object = {r:x, g:y, b:z}\n * OR\n * r, g, b\n * 0 <= r, g, b <= 255\n * returns 0 <= h, s, v <= 1\n */\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n  /* eslint-disable */\n  if (arguments.length === 1) {\n    (g = r.g), (b = r.b), (r = r.r);\n  }\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b),\n    d = max - min,\n    h,\n    s = max === 0 ? 0 : d / max,\n    v = max / 255;\n\n  switch (max) {\n    case min:\n      h = 0;\n      break;\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v,\n  };\n  /* eslint-enable */\n}\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * 0 <= h, s, v <= 1\n * returns 0 <= r, g, b <= 255\n */\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n  /* eslint-disable */\n  var r, g, b, i, f, p, q, t;\n  if (arguments.length === 1) {\n    (s = h.s), (v = h.v), (h = h.h);\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n  /* eslint-enable */\n}\n\nexport const hsvToColor = (h, s, v) => {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(h, s, v);\n  return rgbaColor(r, g, b);\n};\n\nexport function processColorInitially(color) {\n  'worklet';\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\n  return normalizedColor;\n}\n\nexport function isColor(value) {\n  'worklet';\n  if (typeof value !== 'string') {\n    return false;\n  }\n  return processColorInitially(value) != null;\n}\n\nexport function processColor(color) {\n  'worklet';\n  let normalizedColor = processColorInitially(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\n\nexport function convertToHSVA(color) {\n  'worklet';\n  const processedColor = processColorInitially(color); // argb;\n  const a = (processedColor >>> 24) / 255;\n  const r = (processedColor << 8) >>> 24;\n  const g = (processedColor << 16) >>> 24;\n  const b = (processedColor << 24) >>> 24;\n  const { h, s, v } = RGBtoHSV(r, g, b);\n  return [h, s, v, a];\n}\n\nexport function toRGBA(HSVA) {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n  return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\n\nconst interpolateColorsHSV = (value, inputRange, colors) => {\n  'worklet';\n  const colorsAsHSV = colors.map((c) => RGBtoHSV(c));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (value, inputRange, colors) => {\n  'worklet';\n  const r = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => red(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return rgbaColor(r, g, b, a);\n};\n\nexport const interpolateColor = (\n  value,\n  inputRange,\n  outputRange,\n  colorSpace = 'RGB'\n) => {\n  'worklet';\n  outputRange = outputRange.map((c) => processColor(c));\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, outputRange);\n  }\n  throw new Error(\n    `invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"]},"metadata":{},"sourceType":"module"}