{"ast":null,"code":"/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { State } from '../State';\nimport PressGestureHandler from './PressGestureHandler';\nimport { isnan, isValidNumber } from './utils';\n\nclass LongPressGestureHandler extends PressGestureHandler {\n  get minDurationMs() {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  updateHasCustomActivationCriteria({\n    maxDistSq\n  }) {\n    return !isValidNumber(maxDistSq);\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10\n      };\n    }\n\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return { ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs\n    };\n  }\n\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.ACTIVE,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.FAILED\n    }[type];\n  }\n\n}\n\nexport default LongPressGestureHandler;","map":{"version":3,"sources":["LongPressGestureHandler.ts"],"names":["minDurationMs","isnan","maxDist","updateHasCustomActivationCriteria","maxDistSq","isValidNumber","getConfig","shouldCancelWhenOutside","getHammerConfig","time","getState","Hammer","State","FAILED"],"mappings":"AAAA;;AACA;AACA,OAAA,MAAA,MAAA,gBAAA;AAEA,SAAA,KAAA,QAAA,UAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,SAAA,KAAA,EAAA,aAAA,QAAA,SAAA;;AAIA,MAAA,uBAAA,SAAA,mBAAA,CAA0D;AACvC,MAAbA,aAAa,GAAW;AAC1B;AACA,WAAOC,KAAK,CAAC,KAAA,MAAA,CAANA,aAAK,CAALA,GAAAA,GAAAA,GAAyC,KAAA,MAAA,CAAhD,aAAA;AACD;;AAEU,MAAPC,OAAO,GAAG;AACZ;AACA,WAAOD,KAAK,CAAC,KAAA,MAAA,CAANA,OAAK,CAALA,GAAAA,CAAAA,GAAiC,KAAA,MAAA,CAAxC,OAAA;AACD;;AAEDE,EAAAA,iCAAiC,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAwB;AACvD,WAAO,CAACC,aAAa,CAArB,SAAqB,CAArB;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI,CAAC,KAAL,2BAAA,EAAuC;AACrC;AACA;AACA,aAAO;AACLC,QAAAA,uBAAuB,EADlB,IAAA;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAO,KAAP,MAAA;AACD;;AAEDI,EAAAA,eAAe,GAAG;AAChB,WAAO,EACL,GAAG,MADE,eACF,EADE;AAEL;AACAC,MAAAA,IAAI,EAAE,KAAKT;AAHN,KAAP;AAKD;;AAEDU,EAAAA,QAAQ,CAAA,IAAA,EAAsC;AAC5C,WAAO;AACL,OAACC,MAAM,CAAP,WAAA,GAAsBC,KAAK,CADtB,MAAA;AAEL,OAACD,MAAM,CAAP,UAAA,GAAqBC,KAAK,CAFrB,MAAA;AAGL,OAACD,MAAM,CAAP,SAAA,GAAoBC,KAAK,CAHpB,GAAA;AAIL,OAACD,MAAM,CAAP,YAAA,GAAuBC,KAAK,CAACC;AAJxB,MAAP,IAAO,CAAP;AAMD;;AA1CuD;;AA6C1D,eAAA,uBAAA","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport PressGestureHandler from './PressGestureHandler';\nimport { isnan, isValidNumber } from './utils';\nimport { Config } from './GestureHandler';\nimport { HammerInputNames } from './constants';\n\nclass LongPressGestureHandler extends PressGestureHandler {\n  get minDurationMs(): number {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    // @ts-ignore FIXNE(TS)\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  updateHasCustomActivationCriteria({ maxDistSq }: Config) {\n    return !isValidNumber(maxDistSq);\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  getState(type: keyof typeof HammerInputNames) {\n    return {\n      [Hammer.INPUT_START]: State.ACTIVE,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.FAILED,\n    }[type];\n  }\n}\n\nexport default LongPressGestureHandler;\n"]},"metadata":{},"sourceType":"module"}