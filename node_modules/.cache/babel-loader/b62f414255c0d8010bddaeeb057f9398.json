{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { TabView } from 'react-native-tab-view';\nimport { NavigationHelpersContext, TabActions, useTheme } from '@react-navigation/native';\nimport MaterialTopTabBar from './MaterialTopTabBar';\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = props => /*#__PURE__*/React.createElement(MaterialTopTabBar, props),\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}) {\n  const {\n    colors\n  } = useTheme();\n\n  const renderTabBar = props => {\n    return tabBar({ ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(TabView, _extends({}, rest, {\n    onIndexChange: index => navigation.dispatch({ ...TabActions.jumpTo(state.routes[index].name),\n      target: state.key\n    }),\n    renderScene: ({\n      route\n    }) => descriptors[route.key].render(),\n    navigationState: state,\n    renderTabBar: renderTabBar,\n    renderPager: pager,\n    renderLazyPlaceholder: lazyPlaceholder,\n    onSwipeStart: () => navigation.emit({\n      type: 'swipeStart'\n    }),\n    onSwipeEnd: () => navigation.emit({\n      type: 'swipeEnd'\n    }),\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle]\n  })));\n}","map":{"version":3,"sources":["MaterialTopTabView.tsx"],"names":["tabBar","props","rest","colors","useTheme","renderTabBar","state","navigation","descriptors","index","TabActions","target","key","route","type","backgroundColor","background"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,OAAA,QAAA,uBAAA;AACA,SAAA,wBAAA,EAAA,UAAA,EAAA,QAAA,QAAA,0BAAA;AAQA,OAAA,iBAAA,MAAA,qBAAA;AAeA,eAAe,SAAA,kBAAA,CAA4B;AAAA,EAAA,KAAA;AAAA,EAAA,eAAA;AAGzCA,EAAAA,MAAM,GAAIC,KAAD,IAAA,aAAmC,KAAA,CAAA,aAAA,CAAA,iBAAA,EAHH,KAGG,CAHH;AAAA,EAAA,aAAA;AAAA,EAAA,KAAA;AAAA,EAAA,UAAA;AAAA,EAAA,WAAA;AAAA,EAAA,mBAAA;AASzC,KAAGC;AATsC,CAA5B,EAUL;AACR,QAAM;AAAEC,IAAAA;AAAF,MAAaC,QAAnB,EAAA;;AAEA,QAAMC,YAAY,GAAIJ,KAAD,IAA+B;AAClD,WAAOD,MAAM,CAAC,EACZ,GADY,aAAA;AAEZ,SAFY,KAAA;AAGZM,MAAAA,KAAK,EAHO,KAAA;AAIZC,MAAAA,UAAU,EAJE,UAAA;AAKZC,MAAAA,WAAW,EAAEA;AALD,KAAD,CAAb;AADF,GAAA;;AAUA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA;AAAmC,IAAA,KAAK,EAAED;AAA1C,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,aAAa,EAAGE,KAAD,IACb,UAAU,CAAV,QAAA,CAAoB,EAClB,GAAGC,UAAU,CAAVA,MAAAA,CAAkBJ,KAAK,CAALA,MAAAA,CAAAA,KAAAA,EADH,IACfI,CADe;AAElBC,MAAAA,MAAM,EAAEL,KAAK,CAACM;AAFI,KAApB,CAHJ;AAQE,IAAA,WAAW,EAAE,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAeL,WAAW,CAACK,KAAK,CAAjBL,GAAW,CAAXA,CAR9B,MAQ8BA,EAR9B;AASE,IAAA,eAAe,EATjB,KAAA;AAUE,IAAA,YAAY,EAVd,YAAA;AAWE,IAAA,WAAW,EAXb,KAAA;AAYE,IAAA,qBAAqB,EAZvB,eAAA;AAaE,IAAA,YAAY,EAAE,MAAM,UAAU,CAAV,IAAA,CAAgB;AAAEM,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAbtB;AAcE,IAAA,UAAU,EAAE,MAAM,UAAU,CAAV,IAAA,CAAgB;AAAEA,MAAAA,IAAI,EAAE;AAAR,KAAhB,CAdpB;AAeE,IAAA,mBAAmB,EAAE,CACnB;AAAEC,MAAAA,eAAe,EAAEZ,MAAM,CAACa;AAA1B,KADmB,EAAA,mBAAA;AAfvB,GAAA,CAAA,CADF,CADF;AAwBD","sourcesContent":["import * as React from 'react';\nimport { TabView, SceneRendererProps } from 'react-native-tab-view';\nimport {\n  NavigationHelpersContext,\n  TabNavigationState,\n  TabActions,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\n\nimport MaterialTopTabBar from './MaterialTopTabBar';\nimport type {\n  MaterialTopTabDescriptorMap,\n  MaterialTopTabNavigationConfig,\n  MaterialTopTabNavigationHelpers,\n  MaterialTopTabBarProps,\n} from '../types';\n\ntype Props = MaterialTopTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: MaterialTopTabNavigationHelpers;\n  descriptors: MaterialTopTabDescriptorMap;\n  tabBarPosition?: 'top' | 'bottom';\n};\n\nexport default function MaterialTopTabView({\n  pager,\n  lazyPlaceholder,\n  tabBar = (props: MaterialTopTabBarProps) => <MaterialTopTabBar {...props} />,\n  tabBarOptions,\n  state,\n  navigation,\n  descriptors,\n  sceneContainerStyle,\n  ...rest\n}: Props) {\n  const { colors } = useTheme();\n\n  const renderTabBar = (props: SceneRendererProps) => {\n    return tabBar({\n      ...tabBarOptions,\n      ...props,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n    });\n  };\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <TabView\n        {...rest}\n        onIndexChange={(index) =>\n          navigation.dispatch({\n            ...TabActions.jumpTo(state.routes[index].name),\n            target: state.key,\n          })\n        }\n        renderScene={({ route }) => descriptors[route.key].render()}\n        navigationState={state}\n        renderTabBar={renderTabBar}\n        renderPager={pager}\n        renderLazyPlaceholder={lazyPlaceholder}\n        onSwipeStart={() => navigation.emit({ type: 'swipeStart' })}\n        onSwipeEnd={() => navigation.emit({ type: 'swipeEnd' })}\n        sceneContainerStyle={[\n          { backgroundColor: colors.background },\n          sceneContainerStyle,\n        ]}\n      />\n    </NavigationHelpersContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}