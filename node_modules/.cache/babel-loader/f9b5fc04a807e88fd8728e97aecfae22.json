{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, processColor, StyleSheet } from 'react-native';\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false\n});\nexport class BaseButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"lastActive\", void 0);\n\n    _defineProperty(this, \"handleEvent\", ({\n      nativeEvent\n    }) => {\n      const {\n        state,\n        oldState,\n        pointerInside\n      } = nativeEvent;\n      const active = pointerInside && state === State.ACTIVE;\n\n      if (active !== this.lastActive && this.props.onActiveStateChange) {\n        this.props.onActiveStateChange(active);\n      }\n\n      if (oldState === State.ACTIVE && state !== State.CANCELLED && this.lastActive && this.props.onPress) {\n        this.props.onPress(active);\n      }\n\n      this.lastActive = active;\n    });\n\n    _defineProperty(this, \"onHandlerStateChange\", e => {\n      var _this$props$onHandler, _this$props;\n\n      (_this$props$onHandler = (_this$props = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props, e);\n      this.handleEvent(e);\n    });\n\n    _defineProperty(this, \"onGestureEvent\", e => {\n      var _this$props$onGesture, _this$props2;\n\n      (_this$props$onGesture = (_this$props2 = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props2, e);\n      this.handleEvent(e); // TODO: maybe it is not correct\n    });\n\n    this.lastActive = false;\n  }\n\n  render() {\n    const {\n      rippleColor,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(RawButton, _extends({\n      rippleColor: processColor(rippleColor)\n    }, rest, {\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.onHandlerStateChange\n    }));\n  }\n\n}\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0\n  }\n});\nexport class RectButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"opacity\", void 0);\n\n    _defineProperty(this, \"onActiveStateChange\", active => {\n      var _this$props$onActiveS, _this$props3;\n\n      if (Platform.OS !== 'android') {\n        this.opacity.setValue(active ? this.props.activeOpacity : 0);\n      }\n\n      (_this$props$onActiveS = (_this$props3 = this.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props3, active);\n    });\n\n    this.opacity = new Animated.Value(0);\n  }\n\n  render() {\n    const {\n      children,\n      style,\n      ...rest\n    } = this.props;\n    const resolvedStyle = StyleSheet.flatten(style !== null && style !== void 0 ? style : {});\n    return /*#__PURE__*/React.createElement(BaseButton, _extends({}, rest, {\n      style: resolvedStyle,\n      onActiveStateChange: this.onActiveStateChange\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [btnStyles.underlay, {\n        opacity: this.opacity,\n        backgroundColor: this.props.underlayColor,\n        borderRadius: resolvedStyle.borderRadius,\n        borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n        borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n        borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n        borderBottomRightRadius: resolvedStyle.borderBottomRightRadius\n      }]\n    }), children);\n  }\n\n}\n\n_defineProperty(RectButton, \"defaultProps\", {\n  activeOpacity: 0.105,\n  underlayColor: 'black'\n});\n\nexport class BorderlessButton extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"opacity\", void 0);\n\n    _defineProperty(this, \"onActiveStateChange\", active => {\n      var _this$props$onActiveS2, _this$props4;\n\n      if (Platform.OS !== 'android') {\n        this.opacity.setValue(active ? this.props.activeOpacity : 1);\n      }\n\n      (_this$props$onActiveS2 = (_this$props4 = this.props).onActiveStateChange) === null || _this$props$onActiveS2 === void 0 ? void 0 : _this$props$onActiveS2.call(_this$props4, active);\n    });\n\n    this.opacity = new Animated.Value(1);\n  }\n\n  render() {\n    const {\n      children,\n      style,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(AnimatedBaseButton, _extends({}, rest, {\n      onActiveStateChange: this.onActiveStateChange,\n      style: [style, Platform.OS === 'ios' && {\n        opacity: this.opacity\n      }]\n    }), children);\n  }\n\n}\n\n_defineProperty(BorderlessButton, \"defaultProps\", {\n  activeOpacity: 0.3,\n  borderless: true\n});\n\nexport { default as PureNativeButton } from './GestureHandlerButton';","map":{"version":3,"sources":["GestureButtons.tsx"],"names":["RawButton","createNativeWrapper","shouldCancelWhenOutside","shouldActivateOnStart","React","constructor","nativeEvent","pointerInside","active","state","State","oldState","e","render","rest","processColor","onHandlerStateChange","AnimatedBaseButton","Animated","btnStyles","underlay","position","left","right","bottom","top","RectButton","activeOpacity","underlayColor","Platform","resolvedStyle","StyleSheet","style","onActiveStateChange","opacity","backgroundColor","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","BorderlessButton","borderless","default"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  processColor,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\nimport GestureHandlerButton from './GestureHandlerButton';\nimport { State } from '../State';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlers';\nimport {\n  NativeViewGestureHandlerPayload,\n  NativeViewGestureHandlerProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n  rippleColor?: any; // it was present in BaseButtonProps before but is used here in code\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  onPress?: (pointerInside: boolean) => void;\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  underlayColor?: string;\n  activeOpacity?: number;\n}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  borderless?: boolean;\n  activeOpacity?: number;\n}\n\nexport const RawButton = createNativeWrapper(GestureHandlerButton, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: false,\n});\n\nexport class BaseButton extends React.Component<BaseButtonProps> {\n  private lastActive: boolean;\n\n  constructor(props: BaseButtonProps) {\n    super(props);\n    this.lastActive = false;\n  }\n\n  private handleEvent = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state, oldState, pointerInside } = nativeEvent;\n    const active = pointerInside && state === State.ACTIVE;\n\n    if (active !== this.lastActive && this.props.onActiveStateChange) {\n      this.props.onActiveStateChange(active);\n    }\n\n    if (\n      oldState === State.ACTIVE &&\n      state !== State.CANCELLED &&\n      this.lastActive &&\n      this.props.onPress\n    ) {\n      this.props.onPress(active);\n    }\n\n    this.lastActive = active;\n  };\n\n  // Normally, the parent would execute it's handler first,\n  // then forward the event to listeners. However, here our handler\n  // is virtually only forwarding events to listeners, so we reverse the order\n  // to keep the proper order of the callbacks (from \"raw\" ones to \"processed\").\n  private onHandlerStateChange = (\n    e: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onHandlerStateChange?.(e);\n    this.handleEvent(e);\n  };\n\n  private onGestureEvent = (\n    e: GestureEvent<NativeViewGestureHandlerPayload>\n  ) => {\n    this.props.onGestureEvent?.(e);\n    this.handleEvent(\n      e as HandlerStateChangeEvent<NativeViewGestureHandlerPayload>\n    ); // TODO: maybe it is not correct\n  };\n\n  render() {\n    const { rippleColor, ...rest } = this.props;\n\n    return (\n      <RawButton\n        rippleColor={processColor(rippleColor)}\n        {...rest}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}\n      />\n    );\n  }\n}\n\nconst AnimatedBaseButton = Animated.createAnimatedComponent(BaseButton);\n\nconst btnStyles = StyleSheet.create({\n  underlay: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    top: 0,\n  },\n});\n\nexport class RectButton extends React.Component<RectButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.105,\n    underlayColor: 'black',\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: RectButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(0);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 0);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    const resolvedStyle = StyleSheet.flatten(style ?? {});\n\n    return (\n      <BaseButton\n        {...rest}\n        style={resolvedStyle}\n        onActiveStateChange={this.onActiveStateChange}>\n        <Animated.View\n          style={[\n            btnStyles.underlay,\n            {\n              opacity: this.opacity,\n              backgroundColor: this.props.underlayColor,\n              borderRadius: resolvedStyle.borderRadius,\n              borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n              borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n              borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n              borderBottomRightRadius: resolvedStyle.borderBottomRightRadius,\n            },\n          ]}\n        />\n        {children}\n      </BaseButton>\n    );\n  }\n}\n\nexport class BorderlessButton extends React.Component<BorderlessButtonProps> {\n  static defaultProps = {\n    activeOpacity: 0.3,\n    borderless: true,\n  };\n\n  private opacity: Animated.Value;\n\n  constructor(props: BorderlessButtonProps) {\n    super(props);\n    this.opacity = new Animated.Value(1);\n  }\n\n  private onActiveStateChange = (active: boolean) => {\n    if (Platform.OS !== 'android') {\n      this.opacity.setValue(active ? this.props.activeOpacity! : 1);\n    }\n\n    this.props.onActiveStateChange?.(active);\n  };\n\n  render() {\n    const { children, style, ...rest } = this.props;\n\n    return (\n      <AnimatedBaseButton\n        {...rest}\n        onActiveStateChange={this.onActiveStateChange}\n        style={[style, Platform.OS === 'ios' && { opacity: this.opacity }]}>\n        {children}\n      </AnimatedBaseButton>\n    );\n  }\n}\n\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"]},"metadata":{},"sourceType":"module"}