{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nexport default function TabBarTop(props) {\n  const {\n    colors\n  } = useTheme();\n  const {\n    state,\n    navigation,\n    descriptors,\n    activeTintColor = colors.text,\n    inactiveTintColor = Color(activeTintColor).alpha(0.5).rgb().string(),\n    allowFontScaling = true,\n    showIcon = false,\n    showLabel = true,\n    pressColor = Color(activeTintColor).alpha(0.08).rgb().string(),\n    iconStyle,\n    labelStyle,\n    indicatorStyle,\n    style,\n    ...rest\n  } = props;\n  return /*#__PURE__*/React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    activeColor: activeTintColor,\n    inactiveColor: inactiveTintColor,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, indicatorStyle],\n    style: [{\n      backgroundColor: colors.card\n    }, style],\n    pressColor: pressColor,\n    getAccessibilityLabel: ({\n      route\n    }) => descriptors[route.key].options.tabBarAccessibilityLabel,\n    getTestID: ({\n      route\n    }) => descriptors[route.key].options.tabBarTestID,\n    onTabPress: ({\n      route,\n      preventDefault\n    }) => {\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: ({\n      route\n    }) => navigation.emit({\n      type: 'tabLongPress',\n      target: route.key\n    }),\n    renderIcon: ({\n      route,\n      focused,\n      color\n    }) => {\n      if (showIcon === false) {\n        return null;\n      }\n\n      const {\n        options\n      } = descriptors[route.key];\n\n      if (options.tabBarIcon !== undefined) {\n        const icon = options.tabBarIcon({\n          focused,\n          color\n        });\n        return /*#__PURE__*/React.createElement(View, {\n          style: [styles.icon, iconStyle]\n        }, icon);\n      }\n\n      return null;\n    },\n    renderLabel: ({\n      route,\n      focused,\n      color\n    }) => {\n      if (showLabel === false) {\n        return null;\n      }\n\n      const {\n        options\n      } = descriptors[route.key];\n      const label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n\n      if (typeof label === 'string') {\n        return /*#__PURE__*/React.createElement(Text, {\n          style: [styles.label, {\n            color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling\n        }, label);\n      }\n\n      return label({\n        focused,\n        color\n      });\n    }\n  }));\n}\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["colors","useTheme","activeTintColor","inactiveTintColor","Color","allowFontScaling","showIcon","showLabel","pressColor","rest","backgroundColor","primary","card","route","descriptors","preventDefault","event","type","target","canPreventDefault","key","color","options","icon","styles","label","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport { Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop(props: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const {\n    state,\n    navigation,\n    descriptors,\n    activeTintColor = colors.text,\n    inactiveTintColor = Color(activeTintColor).alpha(0.5).rgb().string(),\n    allowFontScaling = true,\n    showIcon = false,\n    showLabel = true,\n    pressColor = Color(activeTintColor).alpha(0.08).rgb().string(),\n    iconStyle,\n    labelStyle,\n    indicatorStyle,\n    style,\n    ...rest\n  } = props;\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      activeColor={activeTintColor}\n      inactiveColor={inactiveTintColor}\n      indicatorStyle={[{ backgroundColor: colors.primary }, indicatorStyle]}\n      style={[{ backgroundColor: colors.card }, style]}\n      pressColor={pressColor}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        if (showIcon === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return <View style={[styles.icon, iconStyle]}>{icon}</View>;\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        if (showLabel === false) {\n          return null;\n        }\n\n        const { options } = descriptors[route.key];\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, labelStyle]}\n              allowFontScaling={allowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}