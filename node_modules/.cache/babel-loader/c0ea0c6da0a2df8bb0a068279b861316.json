{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport { Animated, StyleSheet, View, I18nManager } from 'react-native';\nimport { PanGestureHandler, TapGestureHandler } from '../handlers/gestureHandlers';\nimport { State } from '../State';\nconst DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"onGestureEvent\", void 0);\n\n    _defineProperty(this, \"transX\", void 0);\n\n    _defineProperty(this, \"showLeftAction\", void 0);\n\n    _defineProperty(this, \"leftActionTranslate\", void 0);\n\n    _defineProperty(this, \"showRightAction\", void 0);\n\n    _defineProperty(this, \"rightActionTranslate\", void 0);\n\n    _defineProperty(this, \"updateAnimatedEvent\", (props, state) => {\n      const {\n        friction,\n        overshootFriction\n      } = props;\n      const {\n        dragX,\n        rowTranslation,\n        leftWidth = 0,\n        rowWidth = 0\n      } = state;\n      const {\n        rightOffset = rowWidth\n      } = state;\n      const rightWidth = Math.max(0, rowWidth - rightOffset);\n      const {\n        overshootLeft = leftWidth > 0,\n        overshootRight = rightWidth > 0\n      } = props;\n      const transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - (overshootRight ? 1 : overshootFriction), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 : overshootFriction)],\n        outputRange: [-rightWidth - (overshootRight || overshootFriction > 1 ? 1 : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft || overshootFriction > 1 ? 1 : 0)]\n      });\n      this.transX = transX;\n      this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      this.leftActionTranslate = this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      this.rightActionTranslate = this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n\n    _defineProperty(this, \"onTapHandlerStateChange\", ({\n      nativeEvent\n    }) => {\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this.close();\n      }\n    });\n\n    _defineProperty(this, \"onHandlerStateChange\", ev => {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        this.handleRelease(ev);\n      }\n    });\n\n    _defineProperty(this, \"handleRelease\", ev => {\n      const {\n        velocityX,\n        translationX: dragX\n      } = ev.nativeEvent;\n      const {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n      const {\n        friction,\n        leftThreshold = leftWidth / 2,\n        rightThreshold = rightWidth / 2\n      } = this.props;\n      const startOffsetX = this.currentOffset() + dragX / friction;\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      let toValue = 0;\n\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        // swiped to left\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        // swiped to right\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n\n      this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n\n    _defineProperty(this, \"animateRow\", (fromValue, toValue, velocityX) => {\n      const {\n        dragX,\n        rowTranslation\n      } = this.state;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, {\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations,\n        ...this.props.animationOptions\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n            this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n            this.props.onSwipeableRightOpen();\n          }\n\n          if (toValue === 0) {\n            var _this$props$onSwipeab, _this$props;\n\n            (_this$props$onSwipeab = (_this$props = this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n          } else {\n            var _this$props$onSwipeab2, _this$props2;\n\n            (_this$props$onSwipeab2 = (_this$props2 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);\n          }\n        }\n      });\n\n      if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n        this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n        this.props.onSwipeableRightWillOpen();\n      }\n\n      if (toValue === 0) {\n        var _this$props$onSwipeab3, _this$props3;\n\n        (_this$props$onSwipeab3 = (_this$props3 = this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n      } else {\n        var _this$props$onSwipeab4, _this$props4;\n\n        (_this$props$onSwipeab4 = (_this$props4 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);\n      }\n    });\n\n    _defineProperty(this, \"onRowLayout\", ({\n      nativeEvent\n    }) => {\n      this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n\n    _defineProperty(this, \"currentOffset\", () => {\n      const {\n        leftWidth = 0,\n        rowWidth = 0,\n        rowState\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n\n      return 0;\n    });\n\n    _defineProperty(this, \"close\", () => {\n      this.animateRow(this.currentOffset(), 0);\n    });\n\n    _defineProperty(this, \"openLeft\", () => {\n      const {\n        leftWidth = 0\n      } = this.state;\n      this.animateRow(this.currentOffset(), leftWidth);\n    });\n\n    _defineProperty(this, \"openRight\", () => {\n      const {\n        rowWidth = 0\n      } = this.state;\n      const {\n        rightOffset = rowWidth\n      } = this.state;\n      const rightWidth = rowWidth - rightOffset;\n      this.animateRow(this.currentOffset(), -rightWidth);\n    });\n\n    const _dragX = new Animated.Value(0);\n\n    this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    this.updateAnimatedEvent(_props, this.state);\n    this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n  }\n\n  UNSAFE_componentWillUpdate(props, state) {\n    if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  render() {\n    const {\n      rowState\n    } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions\n    } = this.props;\n    const left = renderLeftActions && /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.leftActions, // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n      {\n        transform: [{\n          translateX: this.leftActionTranslate\n        }]\n      }]\n    }, renderLeftActions(this.showLeftAction, this.transX), /*#__PURE__*/React.createElement(View, {\n      onLayout: ({\n        nativeEvent\n      }) => this.setState({\n        leftWidth: nativeEvent.layout.x\n      })\n    }));\n    const right = renderRightActions && /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.rightActions, {\n        transform: [{\n          translateX: this.rightActionTranslate\n        }]\n      }]\n    }, renderRightActions(this.showRightAction, this.transX), /*#__PURE__*/React.createElement(View, {\n      onLayout: ({\n        nativeEvent\n      }) => this.setState({\n        rightOffset: nativeEvent.layout.x\n      })\n    }));\n    return /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-10, 10]\n    }, this.props, {\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.onHandlerStateChange\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      onLayout: this.onRowLayout,\n      style: [styles.container, this.props.containerStyle]\n    }, left, right, /*#__PURE__*/React.createElement(TapGestureHandler, {\n      enabled: rowState !== 0,\n      onHandlerStateChange: this.onTapHandlerStateChange\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n      style: [{\n        transform: [{\n          translateX: this.transX\n        }]\n      }, this.props.childrenContainerStyle]\n    }, children))));\n  }\n\n}\n\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: { ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  },\n  rightActions: { ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  }\n});","map":{"version":3,"sources":["Swipeable.tsx"],"names":["DRAG_TOSS","Swipeable","friction","overshootFriction","useNativeAnimations","constructor","dragX","Animated","rowTranslation","rowState","leftWidth","rightOffset","rowWidth","undefined","nativeEvent","translationX","useNativeDriver","props","UNSAFE_componentWillUpdate","state","rightWidth","Math","overshootLeft","overshootRight","transX","inputRange","outputRange","Number","extrapolate","State","ev","leftThreshold","rightThreshold","startOffsetX","toValue","velocityX","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","animationOptions","finished","width","render","renderRightActions","left","renderLeftActions","styles","transform","translateX","leftActionTranslate","x","right","rightActionTranslate","onHandlerStateChange","onTapHandlerStateChange","container","overflow","leftActions","StyleSheet","flexDirection","I18nManager","rightActions"],"mappings":"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","sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us\n// to move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  PanGestureHandlerProps,\n  GestureEvent,\n  PanGestureHandlerEventPayload,\n  HandlerStateChangeEvent,\n  TapGestureHandlerEventPayload,\n} from '../handlers/gestureHandlers';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\ninterface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  enableTrackpadTwoFingerGesture?: boolean;\n  friction?: number;\n  leftThreshold?: number;\n  rightThreshold?: number;\n  overshootLeft?: boolean;\n  overshootRight?: boolean;\n  overshootFriction?: number;\n  onSwipeableLeftOpen?: () => void;\n  onSwipeableRightOpen?: () => void;\n  onSwipeableOpen?: () => void;\n  onSwipeableClose?: () => void;\n  onSwipeableLeftWillOpen?: () => void;\n  onSwipeableRightWillOpen?: () => void;\n  onSwipeableWillOpen?: () => void;\n  onSwipeableWillClose?: () => void;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1]\n   * dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  useNativeAnimations?: boolean;\n  animationOptions?: Record<string, unknown>;\n  containerStyle?: StyleProp<ViewStyle>;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [\n        -rightWidth - (overshootRight ? 1 : overshootFriction!),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 : overshootFriction!),\n      ],\n      outputRange: [\n        -rightWidth - (overshootRight || overshootFriction! > 1 ? 1 : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft || overshootFriction! > 1 ? 1 : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all asigned in constructor in `updateAnimatedEvent` but TS cannot spot it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}