{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from './Header';\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from '../../TransitionConfigs/HeaderStyleInterpolators';\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style\n}) {\n  const focusedRoute = getFocusedRoute();\n  return React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    const {\n      options\n    } = scene.descriptor;\n    const isFocused = focusedRoute.key === scene.route.key;\n    const previousRoute = getPreviousRoute({\n      route: scene.route\n    });\n    let previous;\n\n    if (previousRoute) {\n      // The previous scene will be shortly before the current scene in the array\n      // So loop back from current index to avoid looping over the full array\n      for (let j = i - 1; j >= 0; j--) {\n        const s = self[j];\n\n        if (s && s.route.key === previousRoute.key) {\n          previous = s;\n          break;\n        }\n      }\n    } // If the screen is next to a headerless screen, we need to make the header appear static\n    // This makes the header look like it's moving with the screen\n\n\n    const previousScene = self[i - 1];\n    const nextScene = self[i + 1];\n    const isHeaderStatic = previousScene && previousScene.descriptor.options.headerShown === false && // We still need to animate when coming back from next scene\n    // A hacky way to check this is if the next scene exists\n    !nextScene || nextScene && nextScene.descriptor.options.headerShown === false;\n    const props = {\n      mode,\n      layout,\n      insets,\n      scene,\n      previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, React.createElement(View, {\n      onLayout: onContentHeightChange ? e => onContentHeightChange({\n        route: scene.route,\n        height: e.nativeEvent.layout.height\n      }) : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: // Avoid positioning the focused header absolutely\n      // Otherwise accessibility tools don't seem to be able to find it\n      mode === 'float' && !isFocused || options.headerTransparent ? styles.header : null\n    }, options.headerShown !== false ? options.header !== undefined ? options.header(props) : React.createElement(Header, props) : null)));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","mode","i","self","options","scene","isFocused","previousRoute","getPreviousRoute","route","j","s","previous","previousScene","nextScene","isHeaderStatic","props","navigation","styleInterpolator","gestureDirection","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  Route,\n  ParamListBase,\n} from '@react-navigation/native';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp<\n            ParamListBase\n          >,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <NavigationRouteContext.Provider value={scene.route}>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? e =>\n                        onContentHeightChange({\n                          route: scene.route,\n                          height: e.nativeEvent.layout.height,\n                        })\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || options.headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {options.headerShown !== false ? (\n                  options.header !== undefined ? (\n                    options.header(props)\n                  ) : (\n                    <Header {...props} />\n                  )\n                ) : null}\n              </View>\n            </NavigationRouteContext.Provider>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}