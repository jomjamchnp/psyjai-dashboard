{"ast":null,"code":"import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler // ForceTouchGestureHandler,\n\n};\nexport default {\n  Direction,\n\n  handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n\n  createGestureHandler(handlerName, handlerTag, config) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures)) throw new Error(\"react-native-gesture-handler: \".concat(handlerName, \" is not supported on web.\"));\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n\n  attachGestureHandler(handlerTag, newView, propsRef) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n\n  updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n\n  getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n\n  dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n\n};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","handleSetJSResponder","console","handleClearJSResponder","createGestureHandler","handlerName","GestureClass","NodeManager","attachGestureHandler","updateGestureHandler","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,SAAA,SAAA,QAAA,iBAAA;AACA,OAAA,mBAAA,MAAA,2BAAA;AACA,OAAA,uBAAA,MAAA,+BAAA;AACA,OAAA,wBAAA,MAAA,gCAAA;AACA,OAAO,KAAP,WAAA,MAAA,mBAAA;AACA,OAAA,iBAAA,MAAA,yBAAA;AACA,OAAA,mBAAA,MAAA,2BAAA;AACA,OAAA,sBAAA,MAAA,8BAAA;AACA,OAAA,iBAAA,MAAA,yBAAA;AAEA,OAAO,MAAMA,QAAQ,GAAG;AAAA,EAAA,iBAAA;AAAA,EAAA,sBAAA;AAAA,EAAA,mBAAA;AAAA,EAAA,iBAAA;AAAA,EAAA,wBAAA;AAAA,EAAA,uBAAA;AAAA,EAAA,mBAAA,CAQtB;;AARsB,CAAjB;AAWP,eAAe;AAAA,EAAA,SAAA;;AAEbC,EAAAA,oBAAoB,CAAA,GAAA,EAAA,oBAAA,EAA6C;AAC/DC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,wBAAAA,EAAAA,GAAAA,EAAAA,oBAAAA;AAHW,GAAA;;AAKbC,EAAAA,sBAAsB,GAAG;AACvBD,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA;AANW,GAAA;;AAQbE,EAAAA,oBAAoB,CAAA,WAAA,EAAA,UAAA,EAAA,MAAA,EAIlB;AACA;AACA,QAAI,EAAEC,WAAW,IAAjB,QAAI,CAAJ,EACE,MAAM,IAAA,KAAA,CAAA,iCAAA,MAAA,CAAA,WAAA,EAAN,2BAAM,CAAA,CAAN;AAGF,UAAMC,YAAY,GAAGN,QAAQ,CAA7B,WAA6B,CAA7B;AACAO,IAAAA,WAAW,CAAXA,oBAAAA,CAAAA,UAAAA,EAA6C,IAA7CA,YAA6C,EAA7CA;AACA,SAAA,oBAAA,CAAA,UAAA,EAAA,MAAA;AApBW,GAAA;;AAsBbC,EAAAA,oBAAoB,CAAA,UAAA,EAAA,OAAA,EAAA,QAAA,EAIlB;AACAD,IAAAA,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA,OAAAA,EAAAA,QAAAA;AA3BW,GAAA;;AA6BbE,EAAAA,oBAAoB,CAAA,UAAA,EAAA,SAAA,EAAqC;AACvDF,IAAAA,WAAW,CAAXA,UAAAA,CAAAA,UAAAA,EAAAA,mBAAAA,CAAAA,SAAAA;AA9BW,GAAA;;AAgCbG,EAAAA,qBAAqB,CAAA,UAAA,EAAqB;AACxC,WAAOH,WAAW,CAAXA,UAAAA,CAAP,UAAOA,CAAP;AAjCW,GAAA;;AAmCbI,EAAAA,kBAAkB,CAAA,UAAA,EAAqB;AACrCJ,IAAAA,WAAW,CAAXA,kBAAAA,CAAAA,UAAAA;AACD;;AArCY,CAAf","sourcesContent":["import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}