{"ast":null,"code":"import Hammer from '@egjs/hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return { ...super.getHammerConfig(),\n      direction: this.getDirection()\n    };\n  }\n\n  getState(type) {\n    const nextState = super.getState(type); // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n\n    if (this.previousState === State.UNDETERMINED && nextState === State.ACTIVE) {\n      return State.BEGAN;\n    }\n\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist\n    } = config;\n    let directions = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n    if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n    if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n\n    if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10\n      };\n    }\n\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria({\n    deltaX,\n    deltaY\n  }, criteria) {\n    return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n  }\n\n  shouldActivateUnderCustomCriteria({\n    deltaX,\n    deltaY,\n    velocity\n  }, criteria) {\n    return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n      x: deltaX,\n      y: deltaY\n    }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    } // Test if the pan had too much pinching or rotating.\n\n\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(criteria) {\n    return isValidNumber(criteria.minDistSq) || isValidNumber(criteria.minVelocityX) || isValidNumber(criteria.minVelocityY) || isValidNumber(criteria.minVelocitySq) || isValidNumber(criteria.activeOffsetXStart) || isValidNumber(criteria.activeOffsetXEnd) || isValidNumber(criteria.activeOffsetYStart) || isValidNumber(criteria.activeOffsetYEnd);\n  }\n\n  isGestureEnabledForEvent(props, _recognizer, inputData) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return {\n        failed: true\n      };\n    }\n\n    const velocity = {\n      x: inputData.velocityX,\n      y: inputData.velocityY\n    };\n\n    if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n      deltaX: inputData.deltaX,\n      deltaY: inputData.deltaY,\n      velocity\n    }, props)) {\n      if (this.shouldMultiFingerPanFail({\n        pointerLength: inputData.maxPointers,\n        scale: inputData.scale,\n        deltaRotation: inputData.deltaRotation\n      })) {\n        return {\n          failed: true\n        };\n      }\n\n      return {\n        success: true\n      };\n    }\n\n    return {\n      success: false\n    };\n  }\n\n}\n\nexport default PanGestureHandler;","map":{"version":3,"sources":["PanGestureHandler.ts"],"names":["name","NativeGestureClass","Hammer","getHammerConfig","direction","getState","nextState","State","getDirection","config","minDist","directions","horizontalDirections","isnan","verticalDirections","getConfig","minDistSq","shouldFailUnderCustomCriteria","deltaY","criteria","deltaX","shouldActivateUnderCustomCriteria","velocity","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","x","y","shouldMultiFingerPanFail","deltaRotation","pointerLength","deltaScale","Math","scale","absDeltaRotation","updateHasCustomActivationCriteria","isValidNumber","isGestureEnabledForEvent","failed","inputData","velocityY","success"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport {\n  EventMap,\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isValidNumber, isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\nimport { State } from '../State';\n\nimport { Config, HammerInputExt } from './GestureHandler';\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getState(type: keyof typeof EventMap) {\n    const nextState = super.getState(type);\n    // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n    if (\n      this.previousState === State.UNDETERMINED &&\n      nextState === State.ACTIVE\n    ) {\n      return State.BEGAN;\n    }\n    return nextState;\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions: number[] = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart))\n      horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd))\n      horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2)\n      horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart))\n      verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd))\n      verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2)\n      verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { deltaX, deltaY }: HammerInputExt,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.failOffsetXStart) &&\n        deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) &&\n        deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria(\n    { deltaX, deltaY, velocity }: any,\n    criteria: any\n  ) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) &&\n        deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) &&\n        deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) &&\n        deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) &&\n        deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(\n        VEC_LEN_SQ({ x: deltaX, y: deltaY }),\n        criteria.minDistSq\n      ) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({\n    pointerLength,\n    scale,\n    deltaRotation,\n  }: {\n    deltaRotation: number;\n    pointerLength: number;\n    scale: number;\n  }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(\n    criteria: Config & { minVelocityX?: number; minVelocityY?: number }\n  ) {\n    return (\n      isValidNumber(criteria.minDistSq) ||\n      isValidNumber(criteria.minVelocityX) ||\n      isValidNumber(criteria.minVelocityY) ||\n      isValidNumber(criteria.minVelocitySq) ||\n      isValidNumber(criteria.activeOffsetXStart) ||\n      isValidNumber(criteria.activeOffsetXEnd) ||\n      isValidNumber(criteria.activeOffsetYStart) ||\n      isValidNumber(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(\n    props: any,\n    _recognizer: any,\n    inputData: HammerInputExt & { deltaRotation: number }\n  ) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this.hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"module"}