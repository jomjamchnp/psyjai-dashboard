{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */\n\n/* eslint-disable */\n\n\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager'; // TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\n\nlet gestureInstances = 0;\n\nclass GestureHandler {\n  get id() {\n    return \"\".concat(this.name).concat(this.gestureInstance);\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    _defineProperty(this, \"handlerTag\", void 0);\n\n    _defineProperty(this, \"isGestureRunning\", false);\n\n    _defineProperty(this, \"view\", null);\n\n    _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n\n    _defineProperty(this, \"hasGestureFailed\", false);\n\n    _defineProperty(this, \"hammer\", null);\n\n    _defineProperty(this, \"initialRotation\", null);\n\n    _defineProperty(this, \"__initialX\", void 0);\n\n    _defineProperty(this, \"__initialY\", void 0);\n\n    _defineProperty(this, \"config\", {});\n\n    _defineProperty(this, \"previousState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"pendingGestures\", {});\n\n    _defineProperty(this, \"oldState\", State.UNDETERMINED);\n\n    _defineProperty(this, \"lastSentState\", null);\n\n    _defineProperty(this, \"gestureInstance\", void 0);\n\n    _defineProperty(this, \"_stillWaiting\", void 0);\n\n    _defineProperty(this, \"propsRef\", void 0);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"clearSelfAsPending\", () => {\n      if (Array.isArray(this.config.waitFor)) {\n        for (const gesture of this.config.waitFor) {\n          gesture.removePendingGesture(this.id);\n        }\n      }\n    });\n\n    _defineProperty(this, \"destroy\", () => {\n      this.clearSelfAsPending();\n\n      if (this.hammer) {\n        this.hammer.stop(false);\n        this.hammer.destroy();\n      }\n\n      this.hammer = null;\n    });\n\n    _defineProperty(this, \"isPointInView\", ({\n      x,\n      y\n    }) => {\n      // @ts-ignore FIXME(TS)\n      const rect = this.view.getBoundingClientRect();\n      const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n      return pointerInside;\n    });\n\n    _defineProperty(this, \"sendEvent\", nativeEvent => {\n      const {\n        onGestureHandlerEvent,\n        onGestureHandlerStateChange\n      } = this.propsRef.current;\n      const event = this.transformEventData(nativeEvent);\n      invokeNullableMethod(onGestureHandlerEvent, event);\n\n      if (this.lastSentState !== event.nativeEvent.state) {\n        this.lastSentState = event.nativeEvent.state;\n        invokeNullableMethod(onGestureHandlerStateChange, event);\n      }\n    });\n\n    _defineProperty(this, \"sync\", () => {\n      const gesture = this.hammer.get(this.name);\n      if (!gesture) return;\n\n      const enable = (recognizer, inputData) => {\n        if (!this.config.enabled) {\n          this.isGestureRunning = false;\n          this.hasGestureFailed = false;\n          return false;\n        } // Prevent events before the system is ready.\n\n\n        if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n          return this.shouldEnableGestureOnSetup;\n        }\n\n        if (this.hasGestureFailed) {\n          return false;\n        }\n\n        if (!this.isDiscrete) {\n          if (this.isGestureRunning) {\n            return true;\n          } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n          // Only process if there are views to wait for.\n\n\n          this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n\n          if (this._stillWaiting.length) {\n            // Check to see if one of the gestures you're waiting for has started.\n            // If it has then the gesture should fail.\n            for (const gesture of this._stillWaiting) {\n              // When the target gesture has started, this gesture must force fail.\n              if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                this.hasGestureFailed = true;\n                this.isGestureRunning = false;\n                return false;\n              }\n            } // This gesture shouldn't start until the others have finished.\n\n\n            return false;\n          }\n        } // Use default behaviour\n\n\n        if (!this.hasCustomActivationCriteria) {\n          return true;\n        }\n\n        const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n\n        const {\n          success,\n          failed\n        } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, { ...inputData,\n          deltaRotation\n        });\n\n        if (failed) {\n          this.simulateCancelEvent(inputData);\n          this.hasGestureFailed = true;\n        }\n\n        return success;\n      };\n\n      const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n\n      gesture.set({ ...params,\n        enable\n      });\n    });\n\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture) {}\n\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(_config, _recognizer, _event) {\n    return {\n      success: true\n    };\n  }\n\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config) {\n    return true;\n  }\n\n  updateGestureConfig({\n    enabled = true,\n    ...props\n  }) {\n    this.clearSelfAsPending();\n    this.config = ensureConfig({\n      enabled,\n      ...props\n    });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n\n    return this.config;\n  }\n\n  getState(type) {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n\n    return EventMap[type];\n  }\n\n  transformEventData(event) {\n    const {\n      eventType,\n      maxPointers: numberOfPointers\n    } = event; // const direction = DirectionMap[ev.direction];\n\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY\n    }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n\n    const state = this.getState(eventType);\n\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState\n      },\n      timeStamp: Date.now()\n    };\n  }\n\n  transformNativeEvent(_event) {\n    return {};\n  }\n\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  } // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n\n\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({\n    isFirst\n  }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref, propsRef) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view);\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    const {\n      NativeGestureClass\n    } = this; // @ts-ignore TODO(TS)\n\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer.on(\"\".concat(this.name, \"start\"), event => this.onStart(event));\n      this.hammer.on(\"\".concat(this.name, \"end \").concat(this.name, \"cancel\"), event => {\n        this.onGestureEnded(event);\n      });\n    }\n\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({\n    deltaX,\n    deltaY,\n    rotation\n  }) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(({\n        hasGestureFailed\n      }) => hasGestureFailed === false);\n      return stillWaiting;\n    }\n\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers\n    };\n  }\n\n  simulateCancelEvent(_inputData) {}\n\n} // TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\n\n\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const {\n            argMapping\n          } = method.__nodeConfig;\n\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n} // Validate the props\n\n\nfunction ensureConfig(config) {\n  const props = { ...config\n  }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist * props.minDist;\n  }\n\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity * props.minVelocity;\n  }\n\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist * config.maxDist;\n  }\n\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor).map(({\n      handlerTag\n    }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n  configProps.forEach(prop => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray(value) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;","map":{"version":3,"sources":["GestureHandler.ts"],"names":["gestureInstances","State","UNDETERMINED","id","isDiscrete","shouldEnableGestureOnSetup","constructor","getConfig","onWaitingEnded","removePendingGesture","addPendingGesture","gesture","isGestureEnabledForEvent","success","NativeGestureClass","updateHasCustomActivationCriteria","Array","updateGestureConfig","enabled","props","ensureConfig","y","rect","pointerInside","x","getState","type","EventMap","transformEventData","maxPointers","numberOfPointers","changedTouch","event","clientY","state","nativeEvent","handlerTag","target","oldState","timeStamp","Date","transformNativeEvent","onGestureHandlerStateChange","invokeNullableMethod","cancelPendingGestures","Object","notifyPendingGestures","onGestureEnded","forceInvalidate","cancelEvent","eventType","Hammer","isFinal","onRawEvent","isFirst","setView","ref","findNodeHandle","ev","setTimeout","setupEvents","onStart","rotation","onGestureActivated","onSuccess","_getPendingGestures","stillWaiting","hasGestureFailed","getHammerConfig","pointers","enable","recognizer","inputData","deltaRotation","failed","params","simulateCancelEvent","method","handler","argMapping","key","nativeValue","value","config","asArray","NodeManager","v","configProps","prop","Number"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: this.oldState,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const index in argMapping) {\n              const [key, value] = argMapping[index];\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"module"}