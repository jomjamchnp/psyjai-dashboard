{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet, Dimensions, Platform } from 'react-native';\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport CardContainer from './CardContainer';\nimport { DefaultTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nconst EPSILON = 0.01;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nconst getHeaderHeights = (routes, insets, isParentHeaderShown, descriptors, layout, previous) => {\n  return routes.reduce((acc, curr) => {\n    const {\n      options = {}\n    } = descriptors[curr.key] || {};\n    const style = StyleSheet.flatten(options.headerStyle || {});\n    const height = typeof style.height === 'number' ? style.height : previous[curr.key];\n    const safeAreaInsets = { ...insets,\n      ...options.safeAreaInsets\n    };\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top\n    } = options;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (mode, layout, descriptor) => {\n  const {\n    gestureDirection = mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (mode, gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions(mode, {\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n        const oldScene = state.scenes[index];\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n            next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n\n        if (oldScene && scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n    };\n  }\n\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleHeaderLayout\", ({\n      route,\n      height\n    }) => {\n      this.setState(({\n        headerHeights\n      }) => {\n        const previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: { ...headerHeights,\n            [route.key]: height\n          }\n        };\n      });\n    });\n\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(this, \"getPreviousScene\", ({\n      route\n    }) => {\n      const {\n        getPreviousRoute\n      } = this.props;\n      const {\n        scenes\n      } = this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.route.key === previousRoute.key);\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    const {\n      height: _height = 0,\n      width: _width = 0\n    } = Dimensions.get('window');\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    let defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = { ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left\n    } = focusedOptions.safeAreaInsets || {};\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal' ? i !== scenes.length - 1 : true\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(scene => {\n      const {\n        descriptor\n      } = scene;\n      const options = descriptor ? descriptor.options : {};\n      const {\n        headerTransparent,\n        headerShown = true\n      } = options;\n\n      if (headerTransparent || headerShown === false) {\n        return true;\n      }\n\n      return false;\n    }) : false;\n    const floatingHeader = headerMode === 'float' ? /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      insets: {\n        top,\n        right,\n        bottom,\n        left\n      },\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n      styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n      style: [styles.floating, isFloatHeaderAbsolute && [// Without this, the header buttons won't be touchable on Android when headerTransparent: true\n      {\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    })) : null;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index]; // For the screens that shouldn't be active, the value is 0\n      // For those that should be active, but are not the top screen, the value is 1\n      // For those on top of the stack and with interaction enabled, the value is 2\n      // For the old implementation, it stays the same it was\n\n      let isScreenActive = 1;\n\n      if (shouldUseActivityState || Platform.OS === 'web') {\n        if (index < self.length - activeScreensLimit - 1) {\n          // screen should be inactive because it is too deep in the stack\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          const sceneForActivity = scenes[self.length - 1];\n          const outputValue = index === self.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n          : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n          : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n      } else {\n        isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, 0],\n          extrapolate: 'clamp'\n        }) : 1;\n      }\n\n      const {\n        safeAreaInsets,\n        headerShown = true,\n        headerTransparent,\n        cardShadowEnabled,\n        cardOverlayEnabled,\n        cardOverlay,\n        cardStyle,\n        animationEnabled,\n        gestureResponseDistance,\n        gestureVelocityImpact,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n      } = scene.descriptor ? scene.descriptor.options : {};\n      let transitionConfig = {\n        gestureDirection,\n        transitionSpec,\n        cardStyleInterpolator,\n        headerStyleInterpolator\n      }; // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n\n      if (index !== self.length - 1) {\n        const nextScene = scenes[index + 1];\n\n        if (nextScene) {\n          const {\n            animationEnabled,\n            gestureDirection = defaultTransitionPreset.gestureDirection,\n            transitionSpec = defaultTransitionPreset.transitionSpec,\n            cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n            headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator\n          } = nextScene.descriptor ? nextScene.descriptor.options : {};\n          transitionConfig = {\n            gestureDirection,\n            transitionSpec,\n            cardStyleInterpolator,\n            headerStyleInterpolator\n          };\n        }\n      }\n\n      const {\n        top: safeAreaInsetTop = insets.top,\n        right: safeAreaInsetRight = insets.right,\n        bottom: safeAreaInsetBottom = insets.bottom,\n        left: safeAreaInsetLeft = insets.left\n      } = safeAreaInsets || {};\n      const headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: detachInactiveScreens,\n        active: isScreenActive,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(CardContainer, _extends({\n        index: index,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        cardOverlay: cardOverlay,\n        cardOverlayEnabled: cardOverlayEnabled,\n        cardShadowEnabled: cardShadowEnabled,\n        cardStyle: cardStyle,\n        onPageChangeStart: onPageChangeStart,\n        onPageChangeConfirm: onPageChangeConfirm,\n        onPageChangeCancel: onPageChangeCancel,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        gestureResponseDistance: gestureResponseDistance,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        mode: mode,\n        headerMode: headerMode,\n        headerShown: headerShown,\n        hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        gestureEnabled: index !== 0 && getGesturesEnabled({\n          route\n        }),\n        gestureVelocityImpact: gestureVelocityImpact\n      }, transitionConfig)));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","isParentHeaderShown","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","getDerivedStateFromProps","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","Platform","shouldUseActivityState","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","activeScreensLimit","i","detachPreviousScreen","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}