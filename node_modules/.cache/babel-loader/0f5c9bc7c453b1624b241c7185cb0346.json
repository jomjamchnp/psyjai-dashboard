{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Animated, View, Image } from 'react-native';\nexport * from './types';\nlet ENABLE_SCREENS = true;\nexport function enableScreens(shouldEnableScreens = true) {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\nexport function screensEnabled() {\n  return ENABLE_SCREENS;\n}\nexport class NativeScreen extends React.Component {\n  render() {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = true,\n      ...rest\n    } = this.props;\n\n    if (active !== undefined && activityState === undefined) {\n      activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n    }\n\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [style, ENABLE_SCREENS && enabled && activityState !== 2 ? {\n        display: 'none'\n      } : null]\n    }, rest));\n  }\n\n}\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\nexport const ScreenContainer = View;\nexport const NativeScreenContainer = View;\nexport const ScreenStack = View;\nexport const ScreenStackHeaderBackButtonImage = props => /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(Image, _extends({\n  resizeMode: \"center\",\n  fadeDuration: 0\n}, props)));\nexport const ScreenStackHeaderRightView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderLeftView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderCenterView = props => /*#__PURE__*/React.createElement(View, props);\nexport const ScreenStackHeaderConfig = View;\nexport const ScreenStackHeaderSubview = View;\nexport const shouldUseActivityState = true;","map":{"version":3,"sources":["index.tsx"],"names":["ENABLE_SCREENS","shouldEnableScreens","React","render","enabled","rest","active","activityState","display","Screen","Animated","ScreenContainer","NativeScreenContainer","ScreenStack","ScreenStackHeaderBackButtonImage","props","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderSubview","shouldUseActivityState"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,IAAA,EAAA,KAAA,QAAA,cAAA;AASA,cAAA,SAAA;AAEA,IAAIA,cAAc,GAAlB,IAAA;AAEA,OAAO,SAAA,aAAA,CAAuBC,mBAAmB,GAA1C,IAAA,EAAyD;AAC9DD,EAAAA,cAAc,GAAdA,mBAAAA;AACD;AAED,OAAO,SAAA,cAAA,GAAmC;AACxC,SAAA,cAAA;AACD;AAED,OAAO,MAAA,YAAA,SAA2BE,KAAK,CAAhC,SAAA,CAAwD;AAC7DC,EAAAA,MAAM,GAAgB;AACpB,QAAI;AAAA,MAAA,MAAA;AAAA,MAAA,aAAA;AAAA,MAAA,KAAA;AAAgCC,MAAAA,OAAO,GAAvC,IAAA;AAAgD,SAAGC;AAAnD,QAA4D,KAAhE,KAAA;;AACA,QAAIC,MAAM,KAANA,SAAAA,IAAwBC,aAAa,KAAzC,SAAA,EAAyD;AACvDA,MAAAA,aAAa,GAAGD,MAAM,KAANA,CAAAA,GAAAA,CAAAA,GADuC,CACvDC,CADuD,CACjB;AACvC;;AACD,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAE,CAAA,KAAA,EAEL,cAAc,IAAd,OAAA,IAA6BA,aAAa,KAA1C,CAAA,GACI;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADJ,GAFK,IAAA;AADT,KAAA,EADF,IACE,CAAA,CADF;AAWD;;AAjB4D;AAoB/D,OAAO,MAAMC,MAAM,GAAGC,QAAQ,CAARA,uBAAAA,CAAf,YAAeA,CAAf;AAEP,OAAO,MAAMC,eAA0D,GAAhE,IAAA;AAEP,OAAO,MAAMC,qBAAgE,GAAtE,IAAA;AAEP,OAAO,MAAMC,WAAkD,GAAxD,IAAA;AAEP,OAAO,MAAMC,gCAAgC,GAC3CC,KAD8C,IAAA,aAG9C,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,EAAA,UAAU,EAAjB,QAAA;AAA2B,EAAA,YAAY,EAAE;AAAzC,CAAA,EAJG,KAIH,CAAA,CADF,CAHK;AAQP,OAAO,MAAMC,0BAA0B,GACrCD,KADwC,IAAA,aAExB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFX;AAIP,OAAO,MAAME,yBAAyB,GACpCF,KADuC,IAAA,aAEvB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFX;AAIP,OAAO,MAAMG,2BAA2B,GACtCH,KADyC,IAAA,aAEzB,KAAA,CAAA,aAAA,CAAA,IAAA,EAFX,KAEW,CAFX;AAIP,OAAO,MAAMI,uBAA0E,GAAhF,IAAA;AAEP,OAAO,MAAMC,wBAEX,GAFK,IAAA;AAIP,OAAO,MAAMC,sBAAsB,GAA5B,IAAA","sourcesContent":["import React from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n} from './types';\n\nexport * from './types';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let { active, activityState, style, enabled = true, ...rest } = this.props;\n    if (active !== undefined && activityState === undefined) {\n      activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n    }\n    return (\n      <View\n        style={[\n          style,\n          ENABLE_SCREENS && enabled && activityState !== 2\n            ? { display: 'none' }\n            : null,\n        ]}\n        {...rest}\n      />\n    );\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>> = View;\n\nexport const shouldUseActivityState = true;\n"]},"metadata":{},"sourceType":"module"}